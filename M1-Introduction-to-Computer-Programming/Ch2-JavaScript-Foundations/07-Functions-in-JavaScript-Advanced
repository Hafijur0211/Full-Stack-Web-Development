Functions in JavaScript - Advanced
Session Flow
Learning Objective
Introduction
Theme
Primary Goals
Functions in JavaScript - II 
Function Expressions
Types of Functions in JavaScript
Activity: Match the following
Function Execution
Call Stack
JavaScript Hoisting 
Activity: Guess the words
Summary 
What did we learn?
Shortcomings & Challenges
Best practices to follow
Enhance your knowledge
Try it yourself
Learning Objective
Introduction
Advanced JavaScript functions provide a more powerful and flexible way to write code by utilizing features such as helper functions, function expressions, function execution, and JavaScript hoisting. They allow developers to create modular and reusable code and handle complex scenarios such as asynchronous execution and function composition.
Focus: Function Expressions, Types of Functions in JavaScript, Function execution, and JavaScript Hoisting
Prerequisites: VS Code IDE with Node.js installed, JavaScript Basics
Theme
Let's consider a fictional e-commerce company called Shopify that needs a shopping cart functionality for its website. We can use advanced JavaScript function concepts like Function Expressions, and Hoisting to implement this functionality.
We can use function expressions to define the helper functions since they only need to be defined within the scope of the updateCart function. This also allows us to use function execution to call the appropriate helper function based on the action parameter passed into the updateCart function.
JavaScript hoisting comes into play when we use function declarations or variable declarations. When a function or variable is declared with the var keyword, it is hoisted to the top of the function or global scope. This allows us to use the function or variable before it is declared in the code. However, this only applies to declarations, not function expressions or let/const variable declarations.
Primary Goals
Learn how to create reusable functions that perform specific tasks and can be called from other functions to simplify code.
Understand how functions are executed in JavaScript and how to pass arguments to functions.
Learn how JavaScript hoists variable and function declarations to the top of their respective scopes.
Understand the difference between function declarations and function expressions and how to use function expressions to create anonymous functions and closures.
 
Functions in JavaScript - II
Karen had been working as a web developer for several years, and she had become quite proficient in JavaScript. She had built many applications and websites over the years but always looked for ways to improve her skills.
One day, she came across helper functions in JavaScript. She had heard of helper functions before but had never explored the concept in depth. Intrigued, she decided to dive in and learn more.
She created a simple helper function to take a string and capitalize the first letter. She used this function throughout her application, saving her a lot of time and effort.
As she continued to work with helper functions, she discovered that there were many different types of functions in JavaScript. She learned about anonymous, arrow, and higher-order functions, among others.
Function Expressions
Function expressions in JavaScript are another way to define functions. Unlike function declarations, which are hoisted to the top of their scope, function expressions are not hoisted and must be assigned to a variable or a property.
Here's the syntax for a function expression:
const functionName = function(parameters) {
  // Function body
  // You can perform operations and return a value if needed
};
Let's break down the components of a function expression:
const functionName: This is the variable that holds the function. You can use let or var as well, depending on your needs.
function(parameters) { ... }: This is the function itself, which can have parameters just like function declarations.
Function expressions are commonly used in scenarios where you want to assign a function to a variable or pass it as an argument to another function. They provide a more flexible way to create functions and are often used in functional programming and asynchronous programming with callbacks.
Example:
const add = function(a, b) {
  return a + b;
};

const result = add(3, 5);
console.log(result);

// Output
8
In this example, add is a function expression that calculates the sum of two numbers. The function is assigned to the variable add and can be used like any other function.
Function expressions are a powerful feature of JavaScript that allows you to create functions dynamically and use them in various scenarios, offering flexibility and versatility in your code.
Types of Functions in JavaScript
In JavaScript, there are several types of functions, each serving different purposes and offering distinct features.
Here are the main types of functions commonly used in JavaScript:
Function Declarations: Function declarations are the most common type of functions. They are defined using the function keyword followed by the function name and a set of parentheses containing optional parameters. Function declarations are hoisted to the top of their scope, meaning you can call them before their actual declaration in the code.
Example:
function add(a, b) {
  return a + b;
}

console.log(add(4,5));

// Output
9
Function Expressions: Function expressions involve assigning a function to a variable or property. They are defined using the function keyword, but the function itself is not hoisted. Function expressions are often used for callback functions or to create anonymous functions.
Example:
const multiply = function(a, b) {
  return a * b;
};

console.log(multiply(4,5));

// Output
20
Anonymous Function: Anonymous functions are indeed an important type of function in JavaScript. An anonymous function is a function that does not have a name and is often used in situations where a function is used only once or as a callback function.
Example:
const result = (function(a, b) {
  return a + b;
})(3, 5);

console.log(result);

// Output
8
Arrow Functions: Arrow functions are a concise and modern way to write functions introduced in ES6. They have a more compact syntax and do not have their own this or arguments context, using the context of the surrounding code instead.
Example:
const divide = (a, b) => a / b;

console.log(divide(36,9));

// Output
4
Concise Body Arrow Functions
There are numerous other ways to alter the syntax of arrow functions in JavaScript. Concise body refers to the function in its most reduced form. 
Below, we'll look at a number of these strategies:
Parentheses are not required around a parameter in a function that only accepts one. But, parentheses are necessary if a function has zero or more parameters.
// Zero Parameters
const functionName = () => {};

// One Parameters
const functionName = paramOne => {};

// Two or more Parameters
const functionName = (paramOne, paramTwo) => {};
Curly braces are not necessary for a function body made out of a single-line block. Whatever that line evaluates will be automatically returned if the curly braces are missing. The return keyword can be deleted, and the block's content should immediately follow the arrow =>. Implicit return describes this situation.
// Single-line block
const sum = number => number + number;

// Multi-line block
const sum = number => {
	const sum = number + number;
	return sum;
}
Immediately Invoked Function Expressions (IIFE): IIFE is a function expression that is executed immediately after it is defined. It helps create a private scope for variables, preventing them from polluting the global scope.
Example:
(function() {
	let str = "Hello AlmaBetter Learner";
  console.log(str);
})();

// Output
"Hello AlmaBetter Learner"
Generator Functions: Generator functions allow you to pause and resume their execution using the yield keyword. They are useful for dealing with asynchronous code or producing iterable sequences.
Example:
function* numberGenerator() {
  yield 1;
  yield 2;
  yield 3;
  yield 4;
  yield 5;
}

// Create a generator instance
const numbers = numberGenerator();

// Loop through the generated numbers
for (const number of numbers) {
  console.log(number);
}

// Output
1
2
3
4
5
Explanation
In this example, the numberGenerator function is a generator function that yields a sequence of numbers from 1 to 5. When we create the numbers generator instance, it allows us to iterate through the sequence using a for...of loop. The yield keyword is used to produce each number one by one when we request them in the loop.
Recursive Functions: Recursive functions are functions that call themselves during their execution. They are useful for solving problems that involve repetitive tasks or nested data structures.
Example:
function factorial(n) {
  if (n === 0) return 1;
  return n * factorial(n - 1);
}

console.log(factorial(5));

// Output
120
Each type of function in JavaScript has its use cases and benefits, allowing developers to write efficient, reusable, and organized code to tackle various programming challenges.
 
Activity: Match the following
Option A
Option B
1. Arrow Function
a. Refers to the function in its most reduced form
2. Concise Body Arrow Functions
b. Uses unique "fat arrow" '() =>' notation to define functions
3. Anonymous function
c. JavaScript code is run line-by-line in the JavaScript runtime environment
4. Function execution
d. Functions that have no name or identification
Solution
1 - b
2 - a
3 - d
4 - c
 
Function execution
Function execution refers to the process of calling or invoking a function and executing the code inside its body.
When a function is called, a new execution context is created, and its code is executed line by line.
The JavaScript engine follows the function's scope to access local variables declared within the function's body.
If a variable is not found within the function's scope, the engine looks for it in the outer scope (closure) until it reaches the global scope.
When a function returns a value using the return keyword, the value is sent back to the caller.
The function's execution context is then removed from the call stack, and execution continues with the previous function on the stack.
notion image
Call Stack
The Call Stack is a Last-In, First-Out (LIFO) data structure that keeps track of function calls and their execution contexts during the execution of a JavaScript program.
When a function is called, a new execution context is created for that function, and it is pushed onto the top of the call stack.
The execution context contains information about the function's local variables, parameters, and the line of code to be executed next.
As functions complete their execution or reach a return statement, their execution contexts are removed from the call stack (popped off), and the control is transferred back to the previous function in the stack.
The call stack maintains the order of function calls and ensures that each function executes in the correct sequence, preventing potential issues like stack overflow due to excessive nested function calls.
function main() {
  console.log(`Task Starting`);
  task();
  console.log(`Task Completed`);

  function task() {
    console.log(`Task Running`);
  }
}

main();

// Output
"Task Starting"
"Task Running"
"Task Completed"
notion image
JavaScript Hoisting
JavaScript hoisting is a behavior in which variable and function declarations are moved to the top of their respective scopes during the compilation phase before the code is executed. This means that you can use variables and call functions before they are declared in the code, and they will still work as expected due to hoisting.
However, it is essential to understand that only the declarations are hoisted, not the initializations or assignments. Therefore, variables will be initialized with the value undefined by default until the actual assignment is made.
Let's look at some examples to illustrate JavaScript hoisting:
Variable Hoisting:
console.log(x);
var x = 10;
console.log(x);

// Output
undefined
10
In this example, the variable x is hoisted to the top of its scope, and the first console.log prints undefined. Later, the variable is initialized with the value 10, and the second console.log prints 10.
Function Hoisting:
greet();

function greet() {
  console.log("Hello!");
}

// Output
Hello!
In this example, the function greet is hoisted to the top of its scope, allowing it to be called before its actual declaration in the code.
Function Expression Hoisting:
greet();

var greet = function() {
  console.log("Hello!");
};

// Error
Uncaught TypeError: greet is not a function
In this case, the variable greet is hoisted, but it is initialized with undefined, as it is a variable declaration. When we try to call greet() before the function expression assignment, we get an error because greet is not yet a function.
Hoisting can be beneficial for function declarations as it allows you to call functions before they are defined, but it can lead to unexpected behavior and bugs when misused with variables. It is essential to understand hoisting to write more predictable and maintainable JavaScript code.
Note: Generally, programming in other languages like Python, C, C++, and Java does not involve hoisting. Hoisting may result in negative effects on your program. Also, it's recommended to avoid hoisting and declaring variables and functions before using them. When dealing with variables, let is preferable to var.
 
Activity: Guess the words
DOWN
1. A feature in JavaScript where a function or variable can be used before declaring it.
3. In JavaScript, function hoisting occurs before any _________ is executed.
ACROSS
2. In JavaScript, variable declarations are only available to the current __________.
4. The variable in JavaScript that is only declared and not assigned a value.
notion image
Answers
Hoisting
Scope
Code
Undefined
 
 
Summary 
What did we learn?
JavaScript is a high-level, interpreted, and dynamic programming language. It is widely used to create interactive and dynamic web pages and applications.
In JavaScript, a variable is a container that holds a value and can be referenced by a name. Variables declaration can be done using the var, let, or const keywords and can store different data types, such as numbers, strings, and objects.
Function execution in JavaScript refers to calling and running a function. When a function is executed, it executes the code inside it from top to bottom. 
The execution of a function can be triggered in several ways, such as by calling the function by its name, by invoking it as a method of an object, or by using the apply or call methods.
Function expressions are used to create functions as values and can be used as arguments or assigned to variables. 
Function declarations are used to create named functions and are hoisted to the top of their scope. 
Functions in JavaScript can also take parameters, which are values passed into the function and can return a value using the return statement.
Shortcomings & Challenges
JavaScript hoisting can lead to unexpected behavior if not understood and managed properly.
Anonymous functions can be difficult to debug if they don't have a name.
Overuse of functions can result in decreased performance, especially in complex applications.
Functions should be kept concise and well-organized to maintain code readability and maintainability.
Best practices to follow
Use descriptive function names that accurately reflect the function's purpose and behavior.
Break down complex functions into smaller, reusable helper functions.
Avoid using global variables inside functions to prevent unintended consequences and make the function more portable.
Always declare variables with the let or const keywords to prevent potential issues with variable hoisting.
Use function expressions instead of function declarations for helper functions that don't need to be hoisted.
Consider using arrow functions for simple functions that have concise, single-line bodies.
 
Enhance your knowledge
Supercharge your knowledge by exploring the resources provided! 📚
Statements Vs. Expressions: https://www.joshwcomeau.com/javascript/statements-vs-expressions/
Closures in JavaScript: https://blog.hubspot.com/website/javascript-closure
 
Try it yourself
Let's solve these coding problems in the AlmaBetter IDE. Don't forget to join the AlmaBetter Community Platform to share your brilliant approaches and cheer each other on! 🚀 Happy coding! 💻😄
Task 1: Take a shot at cracking these coding problems right within the AlmaBetter IDE.
Problems
Problem 1: Addition with closures
Once upon a time, there was a young boy named Jack who loved to play with numbers. He would spend hours adding, subtracting, multiplying and dividing numbers in his head. One day, he discovered a new game where he had to add a given number to another number as quickly as possible. He found the game challenging and fun, but wished there was an easier way to add the numbers without having to do the calculation every time.
Can you help Jack by writing a closure function that takes a given number as a parameter and returns a new function that takes another number as a parameter and adds it to the given number?
Example 1:
Input: 3
Output: 8
Example 2:
Input: 7
Output: 12
Problem 2: Second smallest number
Once upon a time, there was a young girl named Lily who loved to bake cookies. She would spend hours in the kitchen, mixing ingredients and trying out new recipes. One day, she decided to have a cookie baking competition with her friends. Each friend would bring their best batch of cookies, and they would all taste and judge each other’s cookies. Lily wanted to give a prize to the friend who baked the second-best batch of cookies, but she didn’t know how to determine the winner.
Can you help Lily by writing a function that takes an array of integers representing the scores given by the judges to each batch of cookies, and returns the second smallest number, representing the score of the second-best batch of cookies?
Example 1:
Input: num = [5, 2, 8, 1, 9]
Output: 2
Problem 3: Removing Duplicates
Once upon a time, there was a young boy named Max who loved to collect stamps. He would spend hours sorting through his collection, admiring the different designs and colors. One day, he decided to organize his collection by removing any duplicate stamps. He started going through his collection one stamp at a time, but soon realized that it was taking too long. He wished there was an easier way to remove the duplicates and keep only the unique stamps.
Can you help Max by writing a function that accepts an array of numbers representing the different stamps in his collection, and returns a new array with only the unique numbers, representing the unique stamps in his collection?
Example 1:
Input: nums = [1, 2, 3, 2, 4, 4, 5]
Output: [1, 2, 3, 4, 5]
Solutions
Solution 1: Addition with closures
function main() {
    var target = parseInt(readLine());
    const addFive = addNumber(5);
    console.log(addFive(target));
}

function addNumber(num1) {
  return function(num2) {
    return num1 + num2;
  };
}
Solution 2: Second smallest number
function findSecondSmallest(numbers) {
  numbers.sort((a, b) => a - b);
  return numbers[1];
}
Solution 3: Removing Duplicates
function getUniqueNumbers(numbers) {
  const uniqueNumbers = [];
  numbers.forEach(number => {
    if (!uniqueNumbers.includes(number)) {
      uniqueNumbers.push(number);
    }
  });
  return uniqueNumbers;
}
Task 2: Explain the solution of one of the problem in your Cohort group at AlmaBetter Community Platform.
