Functions in JavaScript - Basics
Session Flow
Learning Objective 
Introduction
Theme
Primary Goals
Functions in JavaScript - Basics 
JavaScript Function
Function Declarations
Calling a Function
Activity: Agree/Disagree
“return” keyword
Parameters & Arguments
Activity: Code Practice
Helper Functions
Use cases of Helper Function
Summary 
What did we learn?
Shortcomings & Challenges
Best practices to follow
Enhance your knowledge
Try it yourself
Learning Objective
Introduction
Functions are the building blocks of complex applications and the key to unlocking the full potential of the language.
Focus: JavaScript Function, Function Declaration, Calling a Function, Parameters & Arguments and Helper Function
Prerequisites: VS Code IDE with Node.js installed, JavaScript Basics
Theme
Functions serve as essential building blocks in programming, allowing developers to break down complex tasks into smaller, manageable units of code. By making code reusable, functions promote modularity and enhance code organization, making it easier to maintain and read.
Leading companies like Google and Microsoft rely on functions to build large-scale, maintainable applications, as they provide a clear and structured way to handle various operations and functionalities. For developers, using functions offers the advantage of writing code in a more understandable and concise manner, fostering collaboration and code sharing among team members.
Primary Goals
Understand the concept and syntax of function declarations in JavaScript.
Learn how to call a function and pass arguments to it.
Understand the difference between parameters and arguments and how they are used in a function.
Understand the different types of functions in JavaScript, including anonymous functions and arrow functions.
Learn about hoisting and how it affects how functions are defined and executed in JavaScript.
Understand the concept of the call stack and how it is used to manage function calls in JavaScript.
 
Functions in JavaScript - Basics
Evan was a software developer who had been working with JavaScript for many years. He had just received a new project that required him to build a complex web application with many features. As he began planning the application, he realized he would need to use functions extensively to keep the code organized and modular.
He started by creating a few simple functions that performed basic tasks, such as formatting dates and times. He then used these functions within larger functions to perform more complex tasks, such as retrieving data from APIs and displaying it on the screen.
As he worked, Evan realized that using functions made debugging and maintaining the code much easier. He could easily isolate errors and fix them without searching through long blocks of code.
JavaScript Function
A function in JavaScript is a piece of reusable code that, when called or executed, completes a certain operation or computation.
The function keyword, the function name, any optional parameters in parentheses, and the code block encased in curly brackets are used to define functions. They can be called by preceding the function name with the parenthesized parameters.
Functions can also be supplied as arguments to other functions, set to variables, and returned as values by other functions. JavaScript functions are a core component of the language and are often utilized to develop modular code and create complicated applications.
Functions are used to make code less repetitive, more reusable, more modular, and simpler to comprehend. They are crucial for creating intricate software systems and are a fundamental idea in the majority of programming languages.
Example of a simple JavaScript function:
// Defining the function
function sum(num1, num2) {
  console.log(num1 + num2);
}

// Calling the function
sum(3, 6);      // Output: 9
This code defines a function called sum which is taking two arguments num1 and num2 and outputs sum using the + operator.
Example of a simple JavaScript function which will calculate the area of a rectangle:
function calculateArea(width, height) {
  let area = width * height;
  console.log(area);
}

// Call the function with arguments
calculateArea(5, 10);
Function Declarations
In JavaScript, function declarations are one of the fundamental ways to define and create reusable blocks of code that can be called later in the program. They allow you to encapsulate logic and operations, making your code more organized and easier to maintain.
Here's the syntax for a function declaration:
function functionName(parameter1, parameter2) {
  // Function body: code that is executed when the function is called
  // You can use parameters and perform operations here
  return result; // Optional: You can return a value from the function
}
Let's break down the components of a function declaration:
function: This keyword is used to declare a function in JavaScript.
functionName: Replace this with the desired name for your function. It should follow the rules for variable naming (e.g., no spaces, can't start with a number).
parameters: These are placeholders for values that you can pass to the function when calling it. They are optional, and you can have none or multiple parameters.
Function body: This is the block of code enclosed within curly braces {}. It contains the logic and operations the function will perform.
return: You can use the return keyword to specify the value that the function will produce and send back when called. If there is no return statement, the function will implicitly return undefined.
Here's an example of a simple function declaration:
function greet(name) {
  return `Hello, ${name}!`;
}

const message = greet("Rohan");
console.log(message);

// Output
"Hello, Rohan!"
In this example, the greet function takes a name parameter and returns a greeting message using that parameter.
Function declarations are hoisted in JavaScript, which means they can be called before they are defined in the code. This makes them accessible throughout the entire scope in which they are declared.
Calling a Function
In JavaScript, calling a function is the process of executing the code inside the function's body. When you call a function, you use its name followed by parentheses (). If the function has any parameters, you can pass arguments to those parameters within the parentheses. The function will then be executed with the provided arguments, and it may return a value if it contains a return statement.
Here's how you call a function in JavaScript:
// Function declaration
function sayHello(name) {
  console.log(`Hello, ${name}!`);
}

// Function call with argument
sayHello("John");

// Output
"Hello, John!"
In this example, the function sayHello is declared with one parameter name. When the function is called with the argument "John", the code inside the function's body will execute, printing "Hello, John!" to the console.
Functions can also return values. Here's an example of a function that calculates the sum of two numbers and returns the result:
function add(a, b) {
  return a + b;
}

const result = add(3, 5);
console.log(result);

// Output
8
In this case, the function add takes two parameters a and b and returns their sum. When the function is called with add(3, 5), it evaluates to 8, which is then stored in the variable result and printed to the console.
Remember that when you call a function, the code inside the function's body executes, and any operations or calculations specified in the function will be performed based on the provided arguments.
 
Activity: Agree/Disagree
Using functions in JavaScript helps in organizing and modularizing code. 
Functions in JavaScript cannot have optional parameters. 
Debugging and maintaining code is easier when using functions in JavaScript. 
Function declarations in JavaScript do not follow a syntax that includes the function name and a code block. 
Answers
Agree. Functions help in breaking down complex tasks into smaller, reusable pieces, making code more organized and maintainable.
Disagree. Functions in JavaScript can have optional parameters by setting default values using the assignment operator =.
Agree. Functions encapsulate logic, making it easier to locate and fix issues, enhancing code maintainability.
Disagree. Function declarations in JavaScript include the function name, parentheses for parameters, and a code block enclosed in curly braces {}.
 
“return” keyword
The return keyword in JavaScript is used to specify the value that a function should produce and send back when called. When a function encounters a return statement, it immediately exits the function and returns the specified value to the caller. If there is no return statement in the function, it implicitly returns undefined.
Here's an example of a function using the "return" keyword:
function add(a, b) {
  return a + b;
}

const result = add(3, 5);
console.log(result);

// Output
8
In this example, the add function takes two parameters, a and b, and returns their sum using the return keyword.
The return keyword is vital when you want a function to produce a specific result or value that can be used in other parts of your code. It enables you to pass data between the function and the calling code, making functions powerful tools for encapsulating and reusing logic within JavaScript programs.
Parameters & Arguments
The functions we've developed so far carry out a task without input. Certain functions, however, can accept inputs and use those inputs to carry out a task.
In JavaScript functions, parameters and arguments are essential concepts related to passing data into and out of functions. They are often used to customize the behavior of functions and make them reusable with different values.
Parameters: Parameters are placeholders or variables defined in the function's declaration. They act as local variables within the function's body, representing the values that the function expects to receive when it is called. Parameters are listed inside the parentheses () when declaring a function.
function greet(name) {
  console.log(`Hello, ${name}!`);
}
In this example, name is a parameter of the greet function. When the function is called, you can pass a value as an argument for name.
Default Parameters: In JavaScript, default parameters allow you to specify default values for function parameters. If a function is called without providing a value for a parameter, the default value is used instead. This feature was introduced in ECMAScript 6 (ES6) and provides a convenient way to handle missing or undefined arguments.
Here's the syntax for defining default parameters in a function:
function functionName(parameter1 = defaultValue1, parameter2 = defaultValue2) {
  // Function body
}
If a value for parameter1 is not provided when the function is called, it will take on the value of defaultValue1, and if parameter2 is not provided, it will take on the value of defaultValue2.
Example:
function greet(name = "Guest") {
  console.log(`Hello, ${name}!`);
}

greet();
greet("John");

// Output
"Hello, Guest!"   (no argument provided, default parameter used)
"Hello, John!"    (argument "John" provided, default parameter ignored)
In this example, the greet function has a default parameter name = "Guest". When the function is called without an argument, the default value "Guest" is used. If an argument is provided, the default parameter is overridden by the provided value.
Default parameters enhance the flexibility and readability of functions by providing sensible defaults for missing arguments, reducing the need for explicit checks for undefined values inside the function.
Arguments: Arguments are the actual values passed to the function when it is called. They correspond to the parameters defined in the function's declaration and provide the data with which the function will operate.
greet("John");
In this example, "John" is an argument passed to the greet function. The function will use this argument to replace the name parameter within the function's body and produce the output "Hello, John!".
In summary, parameters are variables declared in the function's declaration that act as placeholders for values, while arguments are the actual values passed to the function when it is called. By providing arguments when calling a function, you can customize its behavior and perform operations with different data. Parameters and arguments make functions flexible and reusable in JavaScript code.
 
Activity: Code Practice
Create a function that takes in two parameters, with the second parameter being optional with a default value. The function should return the result of multiplying the two parameters together.
Call the function with two arguments, and log the result to the console.
Call the function with only one argument, and log the result to the console.
Solution
function multiplyNumbers(num1, num2 = 2) {
  return num1 * num2;
}

console.log(multiplyNumbers(5, 6)); // Expected output: 30
console.log(multiplyNumbers(3));    // Expected output: 6
 
Helper Functions
Helper functions, also known as utility functions or helper methods, are functions in programming that are created to assist other functions or modules by performing specific tasks or providing reusable functionality. They are designed to handle repetitive or complex tasks, making code more organized, modular, and easier to maintain.
Here's an example of a helper function that calculates the area of a rectangle:
function calculateRectangleArea(width, height) {
  return width * height;
}

const area = calculateRectangleArea(5, 10);
console.log(area);

// Output
50
In this example, calculateRectangleArea is a helper function that takes width and height as parameters and returns their product. This function can be reused in various parts of the program or combined with other functions to perform more complex calculations.
Use cases of Helper Function
Using helper functions helps improve code maintainability, readability, and organization by promoting the principle of Don't Repeat Yourself (DRY). They are a fundamental part of building scalable and maintainable software systems.
Modularize Code: By isolating specific tasks into helper functions, you can break down complex operations into smaller, more manageable pieces, making the code easier to read and understand.
Let's say you have a complex task that involves multiple steps, such as uploading a file, parsing its contents, and saving the results to a database. You can break down this task into smaller functions and call them sequentially:
function uploadFile() {
  // code to upload file
}

function parseFile() {
  // code to parse file contents
}

function saveToDatabase(data) {
  // code to save data to database
}

uploadFile();
let data = parseFile();
saveToDatabase(data);
Reusability: Helper functions can be used in multiple places within a program or across different projects, promoting code reuse and reducing redundancy.
Let's say you have a function called calculateArea that calculates the area of a rectangle. You can call this function multiple times with different parameters to calculate the area of different rectangles:
function calculateArea(length, width) {
  return length * width;
}

let area1 = calculateArea(5, 10); // returns 50
let area2 = calculateArea(3, 7); // returns 21
Encapsulation: They allow you to encapsulate specific logic or operations, hiding the implementation details from the main functions, and promoting abstraction.
Let's say you have a function called toggleButton that toggles the state of a button between on and off. Instead of manipulating the button directly in your code, you can encapsulate this behavior in a function and call it whenever you need to toggle the button:
function toggleButton(button) {
  if (button.getAttribute('data-state') === 'on') {
    button.setAttribute('data-state', 'off');
    button.textContent = 'Off';
  } else {
    button.setAttribute('data-state', 'on');
    button.textContent = 'On';
  }
}

let myButton = document.querySelector('#my-button');
toggleButton(myButton); // toggles button state
Scope: Functions have their own scope, which means they can access and modify variables within their scope, but not outside of it. This can help prevent naming collisions and make your code more secure.
Let's say you have a function called calculateTotal that calculates the total cost of an order. Within this function, you define a variable called subtotal. This variable is only accessible within the scope of the function, and cannot be accessed or modified from outside of it:
function calculateTotal(items) {
  let subtotal = 0;
  for (let item of items) {
    subtotal += item.price;
  }
  let tax = subtotal * 0.1;
  let total = subtotal + tax;
  return total;
}

let myItems = [
  { name: 'Widget', price: 9.99 },
  { name: 'Gadget', price: 14.99 },
  { name: 'Doohickey', price: 4.99 }
];

let myTotal = calculateTotal(myItems); // returns 31.47
Error Handling: Helper functions can be used to handle error scenarios, input validation, or provide fallback options when things go wrong.
According to TIOBE Index March 2023, JavaScript is developer’s seventh most loved programming language.
 
 
Summary
What did we learn?
Functions are defined using the function keyword, followed by the function name, optional parameters in parentheses, and a code block enclosed in curly brackets.
JavaScript functions can be called by preceding the function name with the parenthesized parameters.
Function declarations define a function with a name or identifier, similar to variable declarations.
Functions can be called multiple times and can accept inputs through parameters.
Default parameters allow for predetermined values when a function is called without an or undefined argument.
The return keyword sends data from a function call back to the calling code, allowing the output to be stored in a variable for further use.
Shortcomings & Challenges
Naming conflicts: When multiple functions share the same name in a global scope, they may overwrite each other, leading to unexpected behavior. Namespaces, modules, or closures can help prevent naming conflicts and keep the code organized.
Performance: Creating many functions or using recursion extensively can impact performance, especially in resource-constrained environments. It's essential to consider the trade-offs between code organization and performance when designing your functions.
Debugging: Debugging functions can be challenging, especially when dealing with higher-order functions or callback functions. Utilizing proper error handling, logging, and debugging tools can help mitigate this challenge.
Best practices to follow
Use descriptive function names: Choose function names that clearly describe their purpose and the tasks they perform. This improves code readability and makes it easier for others to understand the code.
Keep functions small and focused: Break down complex tasks into smaller, more focused functions. This improves readability, makes the code easier to maintain, and simplifies debugging.
Avoid global variables: Minimize the use of global variables to reduce the risk of unintended side effects. Instead, use function parameters and local variables to pass data between functions.
Use pure functions: Whenever possible, write pure functions that do not cause side effects and produce consistent output based on their input. Pure functions are easier to test, debug, and maintain.
 
Enhance your knowledge
Supercharge your knowledge by exploring the resources provided! 📚
Why Named Arguments are Better than Positional Arguments: https://blog.bitsrc.io/javascript-why-named-arguments-are-better-than-positional-arguments-9b15ab3155ef
JavaScript Functions: https://data-flair.training/blogs/javascript-function/
 
Try it yourself
Let's solve these coding problems in the AlmaBetter IDE. Don't forget to join the AlmaBetter Community Platform to share your brilliant approaches and cheer each other on! 🚀 Happy coding! 💻😄
Task 1: Solve these Coding Problems in the AlmaBetter IDE.
Problems
Problem 1: Full Name
In a small town, there was a young girl named Emma who loved to write stories. One day, her teacher gave her a challenge. She was asked to write a function called getFullName() that could take a first name and a last name as parameters and return the full name as a string.
Emma knew that a full name is the combination of a person's first name and last name. She set out to solve the problem and write a function called getFullName() that could take a first name and last name as parameters and return the full name as a string.
Can you help Emma solve this problem? Can you write a function called getFullName() that takes a first name and last name as parameters and returns the full name as a string?
Example 1:
Input: firstName = "John" lastName = "Doe"
Output: "John Doe"
Example 2:
Input: firstName = "Alice" lastName = "Smith"
Output: "Alice Smith"
Problem 2: Find a Prime
In a land of numbers and mathematics, there was a young boy named Isaac who loved to solve puzzles and problems. One day, his teacher gave him a challenge. He was asked to write a function called isPrime() that could take a number as a parameter and return true if it was a prime number, and false otherwise.
Isaac knew that a prime number is a positive integer greater than 1 that is divisible by only 1 and itself. He set out to solve the problem and write a function called isPrime() that could take a number as a parameter and determine if it was a prime number.
Can you help Isaac solve this problem? Can you write a function called isPrime() that takes a number as a parameter and returns true if it is a prime number, and false otherwise?
Example 1:
Input: 7
Output: true
Example 2:
Input: 12
Output: false
Problem 3: Number of Occurrences
Once upon a time, there was a young girl named Alice who loved to collect seashells. Every day, she would go to the beach and gather as many seashells as she could find. One day, she decided to count how many of each type of seashell she had collected. She laid out all her seashells in a row and started counting, but soon realized that it was taking too long. She wished there was an easier way to count the occurrences of each type of seashell in her collection.
Can you help Alice by writing a function countOccurrences() that takes an array of numbers representing the different types of seashells and a target number representing the type of seashell she wants to count, and returns the number of times the target number appears in the array?
Example 1:
Input: numbers = [1, 2, 3, 4, 2, 5, 2] target = 2
Output: 3
Example 2:
Input: numbers = numbers = [1, 1, 1, 1] target = 5
Output: 0
Solutions
Solution 1: Full Name
function getFullName(firstName, lastName) {
return firstName + " " + lastName;
}
Solution 2: Find a Prime
function isPrime(number) {
 if (number <= 1) {
    return false;
  }
  for (let i = 2; i <= Math.sqrt(number); i++) {
    if (number % i === 0) {
      return false;
    }
  }
  return true;
}
Solution 3: Number of Occurrences
function countOccurrences(numbers, target) {
  let count = 0;
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] === target) {
      count++;
    }
  }
  return count;
}
Task 2: Share an alternative approach to solving one of the problems within your Cohort group on the AlmaBetter Community Platform.
