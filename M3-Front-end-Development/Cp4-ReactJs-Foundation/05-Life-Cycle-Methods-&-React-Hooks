Life Cycle Methods & React Hooks
Session Flow
Learning Objective 
Introduction
Theme
Primary Goals
Life Cycle Methods & React Hooks
Component Lifecycle
What is React component Lifecycle?
Component Lifecycle Methods
constructor()
render()
componentDidMount()
componentDidUpdate()
componentWillUnmount()
Error handling lifecycle methods
React Hooks
Why do we need React Hooks?
How React Hooks work?
useState() Hook
useEffect() Hook
useContext() Hook
useCallback() Hook
Project Implementation Step 1
Summary 
What did we learn?
Shortcomings & Challenges
Best practices to follows
Enhance your knowledge
Try it yourself
Learning Objective
Introduction
Life cycle methods in React are functions that are automatically called at various stages of a component's life cycle, such as component creation, updating, or unmounting. React Hooks are functions that allow functional components to have state and perform side effects, reducing the need for class components.
Focus: Component Lifecycle, Mounting phase, Updating phase, Unmounting phase, useState, useEffect, useContext
Prerequisites: JavaScript, React Basics, Functional Components, JSX
Theme
Being the creator of React, Facebook uses React extensively throughout its products. They leverage React's lifecycle methods and hooks to manage component lifecycles, handle state changes, and optimize performance in their applications like Facebook, Instagram, and WhatsApp.
Airbnb, the popular online marketplace for lodging and tourism experiences, uses React extensively in its front-end development. They utilize lifecycle methods and hooks to manage the state of their components, handle data fetching, and implement interactive user interfaces.
The streaming entertainment service Netflix uses React to build its web interface. They leverage lifecycle methods and hooks to handle component initialization, data loading, and rendering optimizations to provide a smooth and engaging user experience.
Primary Goals
Gain a comprehensive understanding of the component lifecycle in React, focusing on the three main phases: Mounting, Updating, and Unmounting.
Understand the various stages in the lifecycle of a React component, such as component creation, mounting, updating, and unmounting. 
Utilizing the useState Hook, useEffect Hook, and useContext Hook and learn how to leverage them to manage component state effectively.
Apply the concepts learned to build practical applications, incorporating the topics learned.
 
Life Cycle Methods & React Hooks
Component Lifecycle
Lifecycle Methods in React are a set of methods that are automatically invoked at different stages of a component's lifecycle. These methods allow you to perform specific actions at specific times during the component's existence. In React, the component lifecycle consists of three main phases: Mounting, Updating, and Unmounting. Each phase has its own set of life cycle methods.
notion image
What is React component lifecycle?
In React, components go through a lifecycle of events:
Mounting (adding nodes to the DOM)
Updating (altering existing nodes in the DOM)
Unmounting (removing nodes from the DOM)
Error handling (verifying that your code works and is bug-free)
You can think of these events as a component’s birth, growth, and death. Error handling is like an annual physical.
Let’s look at a simple example. If I told you to build a Hello World component, you might write something like this:
class HelloWorld extends React.Component {
   render() {
    return <h1> Hello World </h1>
   }
}
When this component is rendered and viewed on a client, you may end up with a view like this:
notion image
Before rendering, the component will have gone through its mounting, updating, and unmounting phase. Let’s break it down further.
Mounting a component is like bringing a newborn baby into the world. This is the component’s first glimpse of life. At this phase, the component, which consists of your code and React’s internals, is then inserted into the DOM.
After the mounting phase, the React component “grows” during the updating phase. Without updates, the component would remain as it was when it was initially created in the DOM. As you might imagine, many of the components you write till need to be updated ,  whether via a change in state or props. Consequently, they go through the updating phase as well.
The final phase is called the unmounting phase. At this stage, the component “dies”. In React lingo, it is removed from  the DOM.
There’s one more phase a React component can go through: the error handling phase. This occurs when your code doesn’t run, or there’s a bug somewhere. Think of it like an annual physical.
The following diagram shows the React lifecycle:
notion image
Note that a React component may not go through every phase. For example, a component could be mounted one minute and then unmounted the next   without any updates or error handling. The illustration and example described above assume that the component goes through all four phases .
Component Lifecycle Methods
constructor()
The constructor() is the very first method called as the component is “brought to life.”
The constructor method is called before the component is mounted to the DOM. In most cases, you would initialize state and bind event handlers methods within the constructor method.
Here’s a quick example of the constructor() React lifecycle method in action:
const MyComponent extends React.Component {
  constructor(props) {
   super(props)
    this.state = {
       points: 0
    }
    this.handlePoints = this.handlePoints.bind(this)
    }
}
It’s worth reiterating that this is the first method invoked   before the component is mounted to the DOM. The constructor is not where you would introduce any side effects or subscriptions, such as event handlers.
render()
The next lifecycle method in line is the render method:
class MyComponent extends React.Component {
// render is the only required method for a class component
   render() {
    return<h1> Hoorray! </h1>
   }
}
If you want to render elements to the DOM, — e.g., returning some JSX — the render method is where you would write this (as shown above). 
You can also return arrays and fragments:
class MyComponent extends React.Component {
   render() {
    return [
			<div key="1">Hello</div>,
			<div key="2">World</div>
			];
   }
}
class MyComponent extends React.Component {
   render() {
    return (
      <React.Fragment>
        <div>Hello</div>
        <div>World</div>
      </React.Fragment>
    );
  }
}
 
An important thing to note about the render method is that the render function should be pure i.e. do not attempt to use setStateor interact with the external APIs.
componentDidMount()
The mounting phase refers to the phase during which a component is created and inserted to the DOM. The following methods are called in order. After render is called, the component is mounted to the DOM and the componentDidMount method is invoked. This function is invoked immediately after the component is mounted to the DOM.
You would use the componentDidMount lifecycle method to grab a DOM node from the component tree immediately after it’s mounted.
For example, let’s say you have a modal and want to render the content of the modal within a specific DOM element:
class ModalContent extends React.Component {
  el = document.createElement("section");
  componentDidMount() {
    document.querySelector("body).appendChild(this.el);
  }
 // using a portal, the content of the modal will be rendered in the DOM element attached to the DOM in the componentDidMount method.
}
componentDidUpdate()
Whenever a change is made to the state or props of a React component, the component is re-rendered. In simple terms, the component is updated. This is the updating phase of the React component lifecycle.
It receives the previous props and state as arguments:
componentDidUpdate(prevProps, prevState) {
  // Check if specific props have changed and trigger an action accordingly
  if (this.props.someProp !== prevProps.someProp) {
    // Perform an action based on the change in props
    // For example, make an API call or update the component state
  }

  // Check if specific state values have changed and perform an action if needed
  if (this.state.someState !== prevState.someState) {
    // Perform an action based on the change in state
    // For example, update the component state or trigger another method
  }
  
// You might also perform other operations or cleanup tasks based on the updates.
}
componentWillUnmount()
The componentWillUnmount lifecycle method is invoked immediately before a component is unmounted and destroyed. This is the ideal place to perform any necessary cleanup such as clearing up timers, cancelling network requests, or cleaning up any subscriptions that were created in componentDidMount() as shown below:
// e.g add event listener
componentDidMount() {
    el.addEventListener()
}

// e.g remove event listener
componentWillUnmount() {
    el.removeEventListener()
 }
Error handling lifecycle method
When things go bad in your code, errors are thrown. The following methods are invoked when an error is thrown by a descendant component (i.e., a component below them).
componentDidCatch(error, errorInfo): This method is invoked when an error is thrown by a child component in its lifecycle methods or during rendering. It allows the parent component to capture the error and handle it. The method receives two parameters: error, which represents the error object, and errorInfo, which provides additional information about the error.
Example:
class ErrorBoundary extends React.Component {
  state = { hasError: false };

  componentDidCatch(error, errorInfo) {
    // Handle the error
    this.setState({ hasError: true });
    // Log the error or perform any necessary action
    console.error(error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      // Render fallback UI for the error
      return <div>Something went wrong.</div>;
    }
    // Render the regular UI
    return this.props.children;
  }
}
In the example above, an Error Boundary component uses the componentDidCatch() method. It sets the hasError state to true when an error occurs and renders a fallback UI instead of the regular UI.
It's important to note that error-handling lifecycle methods are only available in class-based components. In functional components, you can use the ErrorBoundary component as a higher-order component or utilize React's Error Boundaries with ErrorBoundary class components to achieve similar error-handling functionality.
React Hooks
React Hooks is a feature introduced in React version 16.8 to allow developers to use state and other React features in functional components previously limited to class components. Hooks provide a more straightforward and concise way to manage state, side effects, and other React features without the need for class components and complex lifecycle methods.
Hooks are functions that enable you to "hook into" React's internal features. They are used to add stateful behavior to functional components, enabling them to have local state and perform side effects.
notion image
Why do we need React Hooks?
React Hooks were introduced to address some limitations and improve the development experience of React applications. Here are a few reasons why React Hooks are valuable:
Functional components with state: Before Hooks, functional components were primarily used for presentational purposes and lacked the ability to manage state. Class components were required for components with internal state. Hooks, specifically the useState hook, allow functional components to have their own state, making them more versatile and reducing the need for class components.
Reusability and code organization: Hooks enable developers to extract and reuse stateful and side-effect logic without introducing unnecessary components or higher-order components (HOCs). Custom hooks can be created to encapsulate and share common logic across multiple components, promoting code reusability and making codebases easier to maintain and refactor.
Simplified lifecycle management: Hooks, especially the useEffect hook, provide a simpler way to manage component lifecycle events and side effects. Developers can use useEffect to handle data fetching, subscriptions, and other side effects without needing separate lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount.
Better performance optimization: Hooks provide performance optimizations through the useMemo and useCallback hooks. These hooks memoize values and functions to prevent unnecessary re-renders of components and their children. This can significantly improve the performance of React applications, especially in scenarios where expensive computations or frequent re-rendering occur.
Improved readability and comprehension: By encapsulating related logic within functional components using hooks, code becomes more modular, readable, and easier to understand. Hooks allow developers to organize code based on related concerns and keep the component's logic in one place. It reduces cognitive load and makes reasoning about and maintaining the codebase easier.
React Hooks simplify state management, lifecycle management, and code organization in React applications, leading to cleaner, more maintainable code and an improved development experience.
How React Hooks work?
React Hooks allow functional components to have state and access to other React features previously exclusive to class components. They achieve this by leveraging the use of special functions, called hooks, that interact with React's internal mechanisms.
When you use a hook, React keeps track of the state and other related data behind the scenes. Let's take a look at the basic principles of how React Hooks work
State management: The useState hook adds state to functional components. When you call useState(initialValue), it returns an array with two elements: the current state value and a function to update that value. React internally tracks the state value and ensures that calling the update function triggers a re-render of the component, updating the state value as necessary.
Lifecycle management and side effects: The useEffect hook allows you to perform side effects in functional components. When you call useEffect(effectFunction, dependencies), React executes the effectFunction after rendering the component and re-renders if any dependencies change. The effect function can contain code to handle component lifecycle events (such as fetching data or subscribing to events) and can return a cleanup function to handle resource cleanup when the component unmounts.
Accessing context: The useContext hook enables functional components to access the value of a context created using the createContext API. By calling useContext(MyContext), React retrieves the current value of the context associated with MyContext and provides it to the component. This avoids the need for nesting multiple components with Context.Consumer or Context.Provider components.
These are just a few examples of how React Hooks work. Each hook has its own unique behavior and interacts with React's reconciliation process to ensure proper rendering, updates, and cleanup. Hooks provide a declarative way to handle state, lifecycle, and other React features within functional components, making them more powerful and expressive.
useState() Hook
The useState hook is one of the most commonly used hooks in React. It allows functional components to have their own state, enabling them to manage and update data over time. The useState hook returns an array with two elements: the current state value and a function to update that value.
Here's how you can use the useState hook in React:
Import the useState hook from the 'react' package:
import React, { useState } from 'react';
Declare a state variable in your functional component using the useState hook. The useState function takes an initial value as its argument and returns an array with the current state value and a function to update that value:
const [state, setState] = useState(initialValue);
In the above line, state represents the current value of the state variable, and setState is the function used to update that value. The initialValue is the initial state value that the variable will have when the component is first rendered.
You can use the state variable in your component's JSX or any other logic within the component:
return (
  <div>
    <p>Current state value: {state}</p>
    <button onClick={() => setState(newValue)}>Update State</button>
  </div>
);
In the example above, the state value is displayed within a paragraph element, and the setState function is called when the button is clicked, updating the state value to newValue.
When the setState function is called, React will re-render the component, and the new state value will be reflected in the UI. It's important to note that calling setState doesn't merge the new state with the previous state like setState does in class components. Instead, it completely replaces the old state value with the new one.
That's the basic usage of the useState hook. By using useState, functional components can manage their own state, allowing for more flexible and reusable code without the need for class components. You can use multiple useState hooks in a single component to manage multiple independent state variables.
useEffect() Hook
The useEffect hook is one of the most commonly used hooks in React. It allows you to perform side effects in functional components, such as fetching data from an API, subscribing to events, or manipulating the DOM. The useEffect hook is called after the component has rendered, and it runs on every subsequent re-render unless specified otherwise.
The basic syntax of the useEffect hook is as follows:
useEffect(effectFunction, dependencies);
The effectFunction parameter is the function that contains the side effect logic. It will be executed after the component renders and re-renders. The dependencies parameter is an optional array that allows you to specify the values that the effectFunction depends on. By providing dependencies, you can control when the effect should run. If the dependencies haven't changed since the last render, React will skip the effect.
The useEffect hook can also return a cleanup function. This function will be executed before the component is unmounted or before the effect runs again (if the dependencies change). It's useful for cleaning up resources like canceling subscriptions, clearing timers, or removing event listeners.
Note
When using the useEffect hook, it's important to handle any asynchronous operations properly and manage dependencies correctly to avoid potential issues like memory leaks or infinite loops.
useContext() Hook
The useContext hook in React is used to access the current context value created using the createContext API. Context provides a way to share data between components without manually passing props through every component tree level. The useContext hook allows functional components to consume the value of a context easily.
Here's a step-by-step explanation of how the useContext hook works:
Context creation: First, you need to create a context using the createContext function. For example, you can define a context named MyContext like this:
const MyContext = React.createContext();
Providing a value: To make the context value accessible to components, you need to wrap the relevant part of your component tree with a Provider component, which is created by the MyContext.Provider property. The Provider component takes a value prop, through which you can pass the value to be shared with the components that consume the context. For example:
const App = () => {
  const sharedValue = "Hello, world!";

  return (
    <MyContext.Provider value={sharedValue}>
      <ChildComponent />
    </MyContext.Provider>
  );
};
In this example, ChildComponent and its descendants will be able to access the sharedValue provided through the context.
Consuming the context value: To access the value of the context in a functional component, you can use the useContext hook. By calling useContext(MyContext), you can retrieve the current value associated with the MyContext context. For example:
const ChildComponent = () => {
  const contextValue = React.useContext(MyContext);

  return <div>{contextValue}</div>;
};
In this case, contextValue will be equal to the value provided through the MyContext.Provider in the App component.
By using the useContext hook, you can consume the context value directly within a functional component, eliminating the need for multiple levels of nesting with Context.Consumer components.
Note that useContext can only be used within functional components or other custom hooks. It cannot be used in regular JavaScript functions.
Overall, the useContext hook simplifies the consumption of context values in React components, making accessing and using shared data easier without the need for prop drilling.
useCallback() Hook
The useCallback hook in React is used to memoize functions, preventing unnecessary re-creation of those functions on each render. It is particularly useful when passing callbacks to child components, as it ensures that the child components don't re-render unnecessarily when the parent component re-renders.
Here's how useCallback works:
Function memoization: When you define a function inside a functional component, it gets re-created on every render, even if the component's dependencies haven't changed. This can lead to unnecessary re-renders in child components that receive these functions as props. useCallback memoizes the provided function and returns a memoized version of it. The memoized version only changes if any of the dependencies in the dependency array (the second argument) change.
Syntax: The useCallback hook takes two arguments: the function to be memoized and a dependency array. The dependency array is an optional argument. The function you pass to useCallback will be memoized and only re-created if any of the dependencies in the array change.
Usage: Here's an example of using useCallback:
import React, { useCallback } from 'react';

function ParentComponent() {
  const handleClick = useCallback(() => {
    // Function logic here
  }, []);

  return (
    <ChildComponent onClick={handleClick} />
  );
}

function ChildComponent({ onClick }) {
  // Child component rendering logic
}
In the example above, handleClick is memoized using useCallback. The function will only be re-created if any of the dependencies in the dependency array change. Since the dependency array is an empty array ([]), the function will be created only once, ensuring that ChildComponent doesn't re-render unnecessarily when the parent component re-renders.
By using useCallback, you can optimize performance by preventing unnecessary re-renders of child components that receive the memoized function as a prop. However, it's important to consider the trade-off between memoization and potential memory usage, especially when dealing with large dependency arrays or frequently changing dependencies.
Project Implementation Step 1
App.js
import "./styles.css";

import { Routes, Route } from "react-router-dom";

// BELOW COMPONENTS
import Home from "./component/home";
import Navbar from "./component/navbar";
import Products from "./component/products";
import Product from "./component/product";
import Cart from "./component/cart";

export default function App() {
  return (
    <>
    
    <Navbar />
      <Routes>
        <Route exact path="/" element={<Home/>} />
        <Route exact path="/products" element={<Products/>} />
        <Route exact path="/products/:id" element={<Product/>} />
        <Route exact path="/cart" element={<Cart/>} />
      </Routes>
    </>
  );
}
Product.js
import React, { useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import { addCart } from "../redux/action";
import { useParams } from "react-router";
import { NavLink } from "react-router-dom";
import Skeleton from "react-loading-skeleton";
import { FaStar } from "react-icons/fa";

const ErrorBoundary = ({ children }) => {
    const [hasError, setHasError] = useState(false);
  
    useEffect(() => { 
      setHasError(false);
    }, [children]);
  
    if (hasError) {
      return <div>Oops! Something went wrong.</div>;
    }
  
    return children;
  };

const Product = () => {
  const { id } = useParams();
  const [product, setProduct] = useState([]);
  const [loading, setLoading] = useState(false);
  const dispatch = useDispatch();

  const addProduct = (product) => {
    dispatch(addCart(product));
  };

  useEffect(() => {
    const getProduct = async () => {
      
        try {
          setLoading(true);
          const response = await fetch(`https://fakestoreapi.com/products/${id}`);
          setProduct(await response.json());
          setLoading(false);
        } catch (error) {
          console.log(error);
        }
      
    };
    getProduct();
  }, []);

  const Loading = () => {
    return (
      <>
        <div className="col-md-6">
          <Skeleton height={400} />
        </div>
        <div className="col-md-6" style={{ lineHeight: 2 }}>
          <Skeleton height={50} width={300} />
          <Skeleton height={75} />
          <Skeleton height={25} width={150} />
          <Skeleton height={50} />
          <Skeleton height={150} />
          <Skeleton height={50} width={100} />
          <Skeleton height={50} width={100} style={{ marginLeft: 6 }} />
        </div>
      </>
    );
  };

  const ShowProduct = () => {
    return (
      <>
        <div className="col-md-6">
          <img
            src={product.image}
            alt={product.title}
            height="400px"
            width="400px"
          />
        </div>
        <div className="col-md-6">
          <h4 className="text-uppercase text-black-50">{product.category}</h4>
          <h1 className="display-5">{product.title}</h1>
          <p className="lead fw-bolder">
            Rating {product.rating && product.rating.rate}
            <FaStar />
          </p>
          <h3 className="display-6 fw-bold my-4">$ {product.price}</h3>
          <p className="lead">{product.description}</p>
          <button
            className="btn btn-outline-dark px-4 py-2"
            onClick={() => addProduct(product)}
          >
            Add to Cart
          </button>
          <NavLink to="/cart" className="btn btn-dark ms-2 px-3 py-2">
            Go to Cart
          </NavLink>
        </div>
      </>
    );
  };

  return (
    <div>
      <div className="container py-5">
        <div className="row py-4">
          <ErrorBoundary>
            {loading ? <Loading /> : <ShowProduct />}
          </ErrorBoundary>
        </div>
      </div>
    </div>
  );
};

export default Product;
Output:
notion image
Explanation:
This React code represents a component named Product, which fetches and displays details of a product using the useEffect and useState hooks. Additionally, it utilizes the useParams hook from react-router to get the id parameter from the URL and the useDispatch hook from react-redux to dispatch an action to add the product to the shopping cart.
Explanation of React Hooks:
useState: The useState hook is used to define and manage local state within functional components. In this code, the useState hook is used to manage the following states:
product: It stores the details of the fetched product using the API response.
loading: It is used to show a loading skeleton when the product details are being fetched.
useEffect: The useEffect hook is used to perform side effects within functional components. In this code, it is used to fetch the product details from the API when the component mounts. The empty dependency array ([]) as the second argument ensures that the effect runs only once when the component is mounted.
useParams: The useParams hook is provided by react-router and allows the component to access the parameters from the current URL. In this code, it retrieves the id parameter from the URL, which corresponds to the specific product to be fetched.
useDispatch: The useDispatch hook is provided by react-redux and allows the component to dispatch actions to the Redux store. In this code, it is used to dispatch the addCart action with the product details when the "Add to Cart" button is clicked.
Explanation of Component Structure:
ErrorBoundary: This is a custom Error Boundary component that catches errors occurring within its children components. If an error is caught, it sets the state hasError to true and displays an error message.
Loading Component: This component is used to show a loading skeleton while the product details are being fetched from the API. It uses the Skeleton component from the react-loading-skeleton library to display placeholders for the product details.
ShowProduct Component: This component displays the product details once they are fetched from the API. It uses the data from the product state to render the product image, title, category, price, rating, and description. Additionally, it provides buttons to add the product to the cart and navigate to the cart page.
The Product Component: This is the main component that renders the fetched product details or the loading skeleton based on the loading state. It also wraps the content inside the ErrorBoundary component to handle any errors that might occur during rendering.
In summary, the Product component uses React hooks like useState, useEffect, useParams, and useDispatch to fetch and manage data, show a loading state, and add products to the shopping cart. Additionally, it utilizes conditional rendering to display different content based on the state of data loading and error handling using the ErrorBoundary component.
 
Summary
What did we learn?
ComponentDidMount method is called immediately after a component is mounted to the DOM. It is commonly used to initiate API calls, set up subscriptions, or perform any necessary setup tasks.
ComponentDidUpdate method is called whenever the component updates and is re-rendered. It is useful for performing actions after a component has been updated, such as updating the DOM or making additional API calls based on prop or state changes.
ComponentWillUnmount method is called just before a component is unmounted and removed from the DOM. It is typically used to clean up resources, unsubscribe from subscriptions, or perform any necessary teardown tasks. 
React also provides additional lifecycle methods such as shouldComponentUpdate, getDerivedStateFromProps, getSnapshotBeforeUpdate, and componentDidCatch, which can be used for more specific purposes, but they are less commonly used in most applications.
The useState hook allows functional components to manage state. It returns a state value and a function to update that value. React re-renders the component by calling the update function and updating the state value.
The useEffect hook handles side effects and manages component lifecycle events. It can perform tasks such as data fetching, subscribing to events, or cleaning up resources. The hook takes a function as its argument, which is executed after rendering, and can optionally specify dependencies to control when the effect is re-executed.
The useContext hook enables functional components to access the value of a context created using the createContext API. It provides a convenient way to access context values without the need for nested components.
The useRef hook creates a mutable reference object that persists across renders. It can be used to hold values that need to persist between renders or to reference DOM elements imperatively.
useCallback and useMemo hooks are used for performance optimization. useCallback memoizes a function, while useMemo memoizes a value. They prevent unnecessary re-creations of functions or re-computations of values when dependencies haven't changed.
Shortcomings & Challenges
Lifecycle methods can make the component codebase more complex and harder to maintain, especially when dealing with larger components or complex component hierarchies.
Lifecycle methods are specific to class components. If you prefer using functional components, you need to convert your components into classes to utilize lifecycle methods, which introduces additional boilerplate code.
Hooks are designed to cover common use cases but may not cover all possible scenarios. In some cases, you may resort to using class components or custom higher-order components (HOCs) to achieve the desired behavior.
React Hooks were introduced in React 16.8, which means that codebases using older versions of React may require significant refactoring to adopt Hooks. This can be a challenge if upgrading the React version is not feasible or if the project has a large codebase.
Best practices to follow
Try to use functional components with Hooks instead of class components with lifecycle methods. Lifecycle methods should be reserved for cases where Hooks cannot fulfill the requirements.
React has deprecated some lifecycle methods, such as componentWillMount, and componentWillUpdate. It's recommended to avoid using these deprecated methods and use the newer alternatives, such as componentDidMount, componentDidUpdate, and static getDerivedStateFromProps.
Hooks should always be used at the top level of functional components, not within loops, conditions, or nested functions. 
Make sure to follow the rules of Hooks, such as calling Hooks directly within functional components (not in nested functions or conditionals) and always calling Hooks in the same order. This helps maintain consistency and avoids unexpected behavior.
 
Enhance Your Knowledge
Supercharge your knowledge by exploring the resources provided! 📚
useNavigate Hooks: ReactJS useNavigate() Hook - GeeksforGeeks 
Custom Hooks: ReactJS Custom Hooks - GeeksforGeeks
 
Try it Yourself
Let's solve these coding problems in the AlmaBetter IDE. Don't forget to join the AlmaBetter Community Platform to share your brilliant approaches and cheer each other on! 🚀 Happy coding! 💻😄
Task 1: Challenge your frontend expertise by solving these coding questions using the VS Code IDE.
Problem
You have been given a React component with a timer that starts when the component mounts and stops when the component unmounts using the componentDidMount and componentWillUnmount lifecycle methods.
import React, { Component } from 'react';

class TimerClassComponent extends Component {
  state = {
    timer: 0,
  };

  intervalId = null;

  componentDidMount() {
    this.startTimer();
  }

  componentWillUnmount() {
    this.stopTimer();
  }

  startTimer = () => {
    this.intervalId = setInterval(() => {
      this.setState((prevState) => ({
        timer: prevState.timer + 1,
      }));
    }, 1000);
  };

  stopTimer = () => {
    clearInterval(this.intervalId);
  };

  render() {
    return (
      <div>
        <h1>Class Component with Lifecycle Methods</h1>
        <p>Timer: {this.state.timer} seconds</p>
      </div>
    );
  }
}

export default TimerClassComponent;
Provide the equivalent React Hooks implementation using useState and useEffect.
Solution
import React, { useState, useEffect } from 'react';

const TimerFunctionalComponent = () => {
  const [timer, setTimer] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setTimer((prevTimer) => prevTimer + 1);
    }, 1000);

    return () => {
      clearInterval(intervalId);
    };
  }, []);

  return (
    <div>
      <h1>Functional Component with Hooks</h1>
      <p>Timer: {timer} seconds</p>
    </div>
  );
};

export default TimerFunctionalComponent;
Task 2: Discuss your approach to resolving any challenges encountered while solving this question on AlmaBetter's Community platform.
