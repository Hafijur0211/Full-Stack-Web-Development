The Capstone Project serves as a crucial checkpoint to evaluate your progress and understanding of the coding concepts covered in the course so far.
The assessment encourages you to manage your time effectively, as you must complete coding tasks within a limited timeframe. This skill is invaluable in a professional coding environment with tight deadlines.
The Capstone project for this module comprises a total of 20 coding challenges centered around JavaScript principles, accompanied by a video explanation.
These challenges are categorized into three sections: Code Bug Fixing with 5 questions, Improvised Perspective with 5 questions, and Logic Building with 10 questions.
Create a video where you introduce yourself (Your name and Cohort name). Within the video, discuss and elaborate on any 5 Coding Problems out of a pool of 20. In your explanation, cover your approach to solving these questions, any obstacles you encountered, and the strategies you employed to overcome them. 
Utilize Loom or YouTube for the video recording, ensuring that the video's duration falls within the range of 7 minutes to 20 minutes.
Kindly complete them and submit your solutions according to the instructions provided in the Final Checklist section.

Code Bug Fixing
From Questions 1 to 5: A couple of issues are present in the provided code. Identify and rectify these errors to ensure the code functions correctly.
 
BMI Calculator
Write a JavaScript function calculateBMI that calculates a person's Body Mass Index (BMI) based on their weight and height, and returns a corresponding health classification. The BMI is a commonly used indicator of body weight status and health.
The function should take two arguments: weight (in kilograms) and height (in meters), and should determine the health classification based on the calculated BMI. To calculate the BMI use the formula: BMI = weight / (height * height)
The function should return the health classification as a String. Determine the health classification based on the calculated BMI:
If BMI is less than 18.5, the person is classified as "Underweight".
If BMI is between 18.5 (inclusive) and 24.9 (exclusive), the person is classified as "Normal weight".
If BMI is between 25 (inclusive) and 29.9 (exclusive), the person is classified as "Overweight".
If BMI is 29.9 or higher, the person is classified as "Obese".
Example 1:
Input: 65, 1.75
Output: "Normal weight"
Example 2:
Input: 45, 1.60
Output: "Underweight"
Note:
Ensure that the provided weight and height values are positive.
This function provides a basic assessment of body weight status based on BMI, but it's important to consider other factors for a comprehensive health evaluation.
 
Code with error(s):
function calculateBMI(weight, height) {
    // Write your code here
    const bmi = weight / (height * height);

    if (bmi < 18.5) {
        return "Underweight";
    } else if (bmi >= 18.5 || bmi < 24.9) {
        return "Normal weight";
    } else if (bmi >= 25 || bmi < 29.9) {
        return "Overweight";
    } else {
        return "Obese";
    }
}

Solution without error

function calculateBMI(weight, height) {
  // Ensure that weight and height are positive
  if (weight <= 0 || height <= 0) {
    return "Invalid input. Weight and height must be positive.";
  }

  // Calculate BMI
  const bmi = weight / (height * height);

  // Determine health classification
  if (bmi < 18.5) {
    return "Underweight";
  } else if (bmi >= 18.5 && bmi < 25) {
    return "Normal weight";
  } else if (bmi >= 25 && bmi < 30) {
    return "Overweight";
  } else {
    return "Obese";
  }
}

// Example usage:
console.log(calculateBMI(65, 1.75));  // Output: "Normal weight"
console.log(calculateBMI(45, 1.60));  // Output: "Underweight"

Temperature Converter
Write a JavaScript function convertTemperature that converts temperatures between Celsius and Fahrenheit scales, providing a flexible tool for users to switch between these two common temperature units.
The function should take two arguments: temperature and unit, where temperature is the numeric value of the temperature to be converted, and unit is a string indicating the initial temperature unit ("C" for Celsius or "F" for Fahrenheit).
The function should return the converted temperature value rounded to two decimal places with converted scale as a String.
If unit is "C", convert the Celsius temperature to Fahrenheit using the formula: Fahrenheit = Celsius * 9/5 + 32.
If unit is "F", convert the Fahrenheit temperature to Celsius using the formula: Celsius = (Fahrenheit - 32) * 5/9.
If unit is neither "C" nor "F", then it should return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit".
Example 1:
Input: 25, "C"
Output: "77.00 F"
Example 2:
Input: -40, "F"
Output: "-40.00 C"
Note:
The temperature can be a positive or negative numeric value representing the temperature to be converted.
The unit argument can only take the values "C" or "F" to indicate the initial temperature unit.
Ensure that the temperature conversion formulas are correctly applied based on the provided unit.
The converted temperature should be rounded to two decimal places for accuracy.
 
Code with error(s):
function convertTemperature(temperature, unit) {
    // Write your code here
    if (unit === "C") {
        const fahrenheit = temperature * 9 % 5 + 32;
        return fahrenheit.toFixed(2) + " F";
    } else if (unit === "F") {
        const celsius = (temperature - 32) * 5 % 9;
        return celsius.toFixed(2) + " C";
    } else {
        return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit.";
    }
}

function convertTemperature(temperature, unit) {
  if (unit === "C") {
    // Convert Celsius to Fahrenheit
    const fahrenheit = temperature * 9/5 + 32;
    return fahrenheit.toFixed(2) + " F";
  } else if (unit === "F") {
    // Convert Fahrenheit to Celsius
    const celsius = (temperature - 32) * 5/9;
    return celsius.toFixed(2) + " C";
  } else {
    // Invalid unit
    return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit";
  }
}

// Examples
console.log(convertTemperature(25, "C")); // Output: "77.00 F"
console.log(convertTemperature(-40, "F")); // Output: "-40.00 C"
console.log(convertTemperature(100, "K")); // Output: "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit"


Tip Calculator
Write a JavaScript function calculateTip that calculates the total amount to be paid, including the tip, based on the bill amount and a specified tip percentage.
The function should take two arguments: billAmount (the total bill amount) and tipPercentage (the tip percentage to be applied, expressed as a decimal). Calculate the tip amount by multiplying the billAmount by the tipPercentage and add the calculated tip amount to the billAmount to get the total amount to be paid.
The function should return the total amount to be paid, rounded to two decimal places as a Number.
Example 1:
Input: 60.75, 0.25
Output: 75.94
Example 2:
Input: 90.00, 0.10
Output: 99
Note:
Use Number() method to convert string value to number.
The billAmount can be any positive numeric value representing the total bill amount.
The tipPercentage should be a decimal value between 0 and 1 (e.g., 0.15 for 15% tip).
 
Code with error(s):
function calculateTip(billAmount, tipPercentage) {
    // Write your code here
    const tipAmount = billAmount * tipPercentage;
    const totalAmount = billAmount + tipAmount;
    return number(totalAmount.toFixed(2));
}

function calculateTip(billAmount, tipPercentage) {
  // Convert input values to numbers
  billAmount = Number(billAmount);
  tipPercentage = Number(tipPercentage);

  // Calculate tip amount
  const tipAmount = billAmount * tipPercentage;

  // Calculate total amount to be paid
  const totalAmount = billAmount + tipAmount;

  // Round to two decimal places
  const roundedTotal = Number(totalAmount.toFixed(2));

  return roundedTotal;
}

// Example usage:
const example1 = calculateTip(60.75, 0.25);
console.log(example1); // Output: 75.94

const example2 = calculateTip(90.00, 0.10);
console.log(example2); // Output: 99



