Module 1: Coding Challenges
The Capstone Project serves as a crucial checkpoint to evaluate your progress and understanding of the coding concepts covered in the course so far.
The assessment encourages you to manage your time effectively, as you must complete coding tasks within a limited timeframe. This skill is invaluable in a professional coding environment with tight deadlines.
The Capstone project for this module comprises a total of 20 coding challenges centered around JavaScript principles, accompanied by a video explanation.
These challenges are categorized into three sections: Code Bug Fixing with 5 questions, Improvised Perspective with 5 questions, and Logic Building with 10 questions.
Create a video where you introduce yourself (Your name and Cohort name). Within the video, discuss and elaborate on any 5 Coding Problems out of a pool of 20. In your explanation, cover your approach to solving these questions, any obstacles you encountered, and the strategies you employed to overcome them. 
Utilize Loom or YouTube for the video recording, ensuring that the video's duration falls within the range of 7 minutes to 20 minutes.

Coding Problems
Code Bug Fixing
From Questions 1 to 5: A couple of issues are present in the provided code. Identify and rectify these errors to ensure the code functions correctly.
 
BMI Calculator

Write a JavaScript function calculateBMI that calculates a person's Body Mass Index (BMI) based on their weight and height, and returns a corresponding health classification. The BMI is a commonly used indicator of body weight status and health.
The function should take two arguments: weight (in kilograms) and height (in meters), and should determine the health classification based on the calculated BMI. To calculate the BMI use the formula: BMI = weight / (height * height)
The function should return the health classification as a String. Determine the health classification based on the calculated BMI:
If BMI is less than 18.5, the person is classified as "Underweight".
If BMI is between 18.5 (inclusive) and 24.9 (exclusive), the person is classified as "Normal weight".
If BMI is between 25 (inclusive) and 29.9 (exclusive), the person is classified as "Overweight".
If BMI is 29.9 or higher, the person is classified as "Obese".
Example 1:
Input: 65, 1.75
Output: "Normal weight"
Example 2:
Input: 45, 1.60
Output: "Underweight"
Note:
Ensure that the provided weight and height values are positive.
This function provides a basic assessment of body weight status based on BMI, but it's important to consider other factors for a comprehensive health evaluation.
 
Code with error(s):
function calculateBMI(weight, height) {
    // Write your code here
    const bmi = weight / (height * height);

    if (bmi < 18.5) {
        return "Underweight";
    } else if (bmi >= 18.5 || bmi < 24.9) {
        return "Normal weight";
    } else if (bmi >= 25 || bmi < 29.9) {
        return "Overweight";
    } else {
        return "Obese";
    }
}

// Solution code without error

function calculateBMI(weight, height) {
    // Ensure that weight and height are positive
    if (weight <= 0 || height <= 0) {
        return "Invalid input. Please provide positive values for weight and height.";
    }

    const bmi = weight / (height * height);

    if (bmi < 18.5) {
        return "Underweight";
    } else if (bmi >= 18.5 && bmi < 24.9) {
        return "Normal weight";
    } else if (bmi >= 25 && bmi < 29.9) {
        return "Overweight";
    } else {
        return "Obese";
    }
}


Temperature Converter

Write a JavaScript function convertTemperature that converts temperatures between Celsius and Fahrenheit scales, providing a flexible tool for users to switch between these two common temperature units.
The function should take two arguments: temperature and unit, where temperature is the numeric value of the temperature to be converted, and unit is a string indicating the initial temperature unit ("C" for Celsius or "F" for Fahrenheit).
The function should return the converted temperature value rounded to two decimal places with converted scale as a String.
If unit is "C", convert the Celsius temperature to Fahrenheit using the formula: Fahrenheit = Celsius * 9/5 + 32.
If unit is "F", convert the Fahrenheit temperature to Celsius using the formula: Celsius = (Fahrenheit - 32) * 5/9.
If unit is neither "C" nor "F", then it should return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit".
Example 1:
Input: 25, "C"
Output: "77.00 F"
Example 2:
Input: -40, "F"
Output: "-40.00 C"
Note:
The temperature can be a positive or negative numeric value representing the temperature to be converted.
The unit argument can only take the values "C" or "F" to indicate the initial temperature unit.
Ensure that the temperature conversion formulas are correctly applied based on the provided unit.
The converted temperature should be rounded to two decimal places for accuracy.
 
Code with error(s):
function convertTemperature(temperature, unit) {
    // Write your code here
    if (unit === "C") {
        const fahrenheit = temperature * 9 % 5 + 32;
        return fahrenheit.toFixed(2) + " F";
    } else if (unit === "F") {
        const celsius = (temperature - 32) * 5 % 9;
        return celsius.toFixed(2) + " C";
    } else {
        return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit.";
    }
}


// Solution code without error

function convertTemperature(temperature, unit) {
    // Ensure that the unit is either "C" or "F"
    if (unit !== "C" && unit !== "F") {
        return "Invalid unit. Use 'C' for Celsius or 'F' for Fahrenheit.";
    }

    if (unit === "C") {
        const fahrenheit = temperature * 9/5 + 32;
        return fahrenheit.toFixed(2) + " F";
    } else if (unit === "F") {
        const celsius = (temperature - 32) * 5/9;
        return celsius.toFixed(2) + " C";
    }
}

// Test examples
console.log(convertTemperature(25, "C")); // Output: "77.00 F"
console.log(convertTemperature(-40, "F")); // Output: "-40.00 C"


Tip Calculator

Write a JavaScript function calculateTip that calculates the total amount to be paid, including the tip, based on the bill amount and a specified tip percentage.
The function should take two arguments: billAmount (the total bill amount) and tipPercentage (the tip percentage to be applied, expressed as a decimal). Calculate the tip amount by multiplying the billAmount by the tipPercentage and add the calculated tip amount to the billAmount to get the total amount to be paid.
The function should return the total amount to be paid, rounded to two decimal places as a Number.
Example 1:
Input: 60.75, 0.25
Output: 75.94
Example 2:
Input: 90.00, 0.10
Output: 99
Note:
Use Number() method to convert string value to number.
The billAmount can be any positive numeric value representing the total bill amount.
The tipPercentage should be a decimal value between 0 and 1 (e.g., 0.15 for 15% tip).
 
Code with error(s):
function calculateTip(billAmount, tipPercentage) {
    // Write your code here
    const tipAmount = billAmount * tipPercentage;
    const totalAmount = billAmount + tipAmount;
    return number(totalAmount.toFixed(2));
}

// Solution code without error

function calculateTip(billAmount, tipPercentage) {
    // Calculate tip amount
    const tipAmount = billAmount * tipPercentage;

    // Calculate total amount to be paid
    const totalAmount = billAmount + tipAmount;

    // Convert the total amount to a number and round to two decimal places
    return Number(totalAmount.toFixed(2));
}

// Test examples
console.log(calculateTip(60.75, 0.25)); // Output: 75.94
console.log(calculateTip(90.00, 0.10)); // Output: 99


Palindrome Checker

Write a JavaScript function isPalindrome that checks if a given string is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).
The function should take one argument: str (string), and should perform the following steps:
Convert the input string to lowercase.
Remove any non-alphanumeric characters (including spaces and punctuation) from the string.
Compare the modified string with its reverse to determine if it is a palindrome.
The function should return a boolean value indicating whether the input string is a palindrome.
Example 1:
Input: "RaceCar"
Output: true
Example 2:
Input: "Hello"
Output: false
 
Code with error(s):
function isPalindrome(str) {
    // Write your code here
    const cleanedStr = str.replace(/[^a-z0-9]/g, "");
    const reversedStr = cleanedStr.split("").reverse().join("");
    return cleanedStr === reversedStr;
}

// Solution code without error

function isPalindrome(str) {
    // Convert the input string to lowercase and remove non-alphanumeric characters
    const cleanedStr = str.toLowerCase().replace(/[^a-z0-9]/g, "");

    // Compare the modified string with its reverse to check for palindrome
    return cleanedStr === cleanedStr.split('').reverse().join('');
}

// Test examples
console.log(isPalindrome("RaceCar")); // Output: true
console.log(isPalindrome("Hello")); // Output: false

Vowel Count

Write a JavaScript function countVowels that counts the number of vowels (a, e, i, o, u) in a given string. The function should take one argument: str (string).
The function should return the count of vowels in the input string.
Example 1:
Input: "AlmaBetter"
Output: 4
Example 2:
Input: "Coding is fun with fellow learners"
Output: 10
 
Code with error(s):
function countVowels(str) {
    // Write your code here
    const vowels = ['a', 'e', 'i', 'o', 'u'];
    const lowerStr = str.toLowerCase();
    let count = 0;

    for (let i = 0; i <= lowerStr.length; i++) {
        if (vowels.includes(lowerStr[i])) {
            count++;
        }
    }
    return count;
}

// Solution code without error

function countVowels(str) {
    // Define the vowels
    const vowels = ['a', 'e', 'i', 'o', 'u'];

    // Convert the input string to lowercase
    const lowerStr = str.toLowerCase();

    // Initialize the count of vowels
    let count = 0;

    // Loop through each character in the string
    for (let i = 0; i < lowerStr.length; i++) {
        // Check if the character is a vowel
        if (vowels.includes(lowerStr[i])) {
            count++;
        }
    }

    // Return the count of vowels
    return count;
}

// Test examples
console.log(countVowels("AlmaBetter")); // Output: 4
console.log(countVowels("Coding is fun with fellow learners")); // Output: 10


Improvised Perspective to the Coding Problem
From Questions 1 to 5: Provide an alternative code implementation different from the one you've been given.
 
Longest Word Length

Write a JavaScript function called findLongestWord that takes a sentence (string) as input and determines the length of the longest word within the sentence.
Example 1:
Input: "Coding is fun with fellow learners"
Output: 8
Example 2:
Input: "The quick brown fox jumped over the lazy dog"
Output: 6
 
Approach 1:
function findLongestWord(sentence) {
		// Write your code here
    const words = sentence.split(' ');
    let maxLength = 0;

    for (let i = 0; i < words.length; i++) {
        const length = words[i].length;
        if (length > maxLength) {
            maxLength = length;
        }
    }

    return maxLength;
}

// Do not modify the below lines
module.exports = { findLongestWord };
 
Approach 2: Rewrite the above code using for…of loop.

// Solution

function findLongestWord(sentence) {
    // Split the sentence into words
    const words = sentence.split(' ');

    // Initialize the maximum length variable
    let maxLength = 0;

    // Iterate over each word using for...of loop
    for (const word of words) {
        const length = word.length;

        // Update maxLength if the current word is longer
        if (length > maxLength) {
            maxLength = length;
        }
    }

    // Return the maximum length
    return maxLength;
}

// Test examples
console.log(findLongestWord("Coding is fun with fellow learners")); // Output: 8
console.log(findLongestWord("The quick brown fox jumped over the lazy dog")); // Output: 6


Title Case
Write a JavaScript function called titleCase which accepts a sentence (string) as input and transforms it into title case.
Title case means that the initial letter of each word is capitalized.
Example 1:
Input: "Dream big, work hard, and stay focused"
Output: "Dream Big, Work Hard, And Stay Focused"
Example 2:
Input: "Be yourself; everyone else is already taken."
Output: "Be Yourself; Everyone Else Is Already Taken."
 
Approach 1:
function titleCase(sentence) {
		// write your code here
    const words = sentence.toLowerCase().split(' ');

    for (let i = 0; i < words.length; i++) {
        words[i] = words[i][0].toUpperCase() + words[i].substring(1);
    }

    return words.join(' ');
}

// Do not modify the below lines
module.exports = { titleCase };
 
Approach 2: Rewrite the code using map method.

function titleCase(sentence) {
    // Convert the sentence to lowercase and split into words
    const words = sentence.toLowerCase().split(' ');

    // Use map to capitalize the first letter of each word
    const titleCaseWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));

    // Join the words back into a sentence
    return titleCaseWords.join(' ');
}

// Test examples
console.log(titleCase("Dream big, work hard, and stay focused")); 
// Output: "Dream Big, Work Hard, And Stay Focused"

console.log(titleCase("Be yourself; everyone else is already taken."));
// Output: "Be Yourself; Everyone Else Is Already Taken."


Count Occurrences of a Character

Write a JavaScript function countOccurrences that takes a string and a character as input and returns the count of occurrences of that character in the sentence string.
Example 1:
Input: "hello world", "l"
Output: 3
Example 2:
Input: "Elephant", "E"
Output: 1
Note:
Characters are case-sensitive. For example, "AlmaBetter" contains 1 A and 1 a.
 
Approach 1:
function countOccurrences(str, char) {
    // Write your code here
    let count = 0;
    for (const c of str) {
        if (c === char) {
            count++;
        }
    }
    return count;
}

// Do not modify the below lines
module.exports = { countOccurrences };
 
Approach 2: Rewrite the code without using any loop, and try to implement inbuilt string methods.

// Solution

function countOccurrences(str, char) {
    // Split the string into an array of characters, filter based on the specified character, and get the length
    const count = str.split('').filter(c => c === char).length;
    
    return count;
}

// Test examples
console.log(countOccurrences("hello world", "l")); // Output: 3
console.log(countOccurrences("Elephant", "E")); // Output: 1


Shopping Cart Total
Imagine you're building an e-commerce website. Write a JavaScript function calculateTotal that takes an array of products (objects) and calculates the total cost of the items in the shopping cart.
Each product object has the following properties:
name: The name of the product (string).
price: The price of the product (number).
quantity: The quantity of the product in the cart (number).
Example 1:
const cart1 = [
  { name: "Laptop", price: 1000, quantity: 1 },
  { name: "Phone", price: 500, quantity: 2 },
  { name: "Headphones", price: 50, quantity: 4 },
];

Input: cart1
Output: 2200
Explanation: price * quantity of all products = 1000 + 2 * 500 + 4 * 50 = 2200
Example 2:
const cart2 = [
  { name: "Fruits", price: 10, quantity: 5 },
  { name: "Vegetables", price: 8, quantity: 3 },
  { name: "Dairy", price: 5, quantity: 2 },
  { name: "Snacks", price: 3, quantity: 10 },
];

Input: cart2
Output: 114
Explanation: price * quantity of all products = (5 * 10 + 3 * 8 + 2 * 5 + 10 * 3) = 114
 
Approach 1:
function calculateTotal(cart) {
    // Write your code here
    let total = 0;
    for (let i = 0; i < cart.length; i++) {
        total += cart[i].price * cart[i].quantity;
    }
    return total;
}

// Do not modify the below lines
module.exports = { calculateTotal };
 
Approach 2: Rewrite the code using reduce() method.

// Solution 

function calculateTotal(cart) {
    // Use reduce to calculate the total cost
    const total = cart.reduce((accumulator, product) => accumulator + product.price * product.quantity, 0);
    
    return total;
}

// Test examples
const cart1 = [
  { name: "Laptop", price: 1000, quantity: 1 },
  { name: "Phone", price: 500, quantity: 2 },
  { name: "Headphones", price: 50, quantity: 4 },
];

console.log(calculateTotal(cart1)); // Output: 2200

const cart2 = [
  { name: "Fruits", price: 10, quantity: 5 },
  { name: "Vegetables", price: 8, quantity: 3 },
  { name: "Dairy", price: 5, quantity: 2 },
  { name: "Snacks", price: 3, quantity: 10 },
];

console.log(calculateTotal(cart2)); // Output: 114

FizzBuzz
Write a JavaScript function fizzBuzz that takes a positive integer n as input and returns an array of strings.
Replace numbers divisible by 3 with "Fizz", numbers divisible by 4 with "Buzz", and numbers divisible by both 3 and 4 with "FizzBuzz".
Example 1:
Input: 12
Output: ["1", "2", "Fizz", "Buzz", "5", "Fizz", "7", "Buzz", "Fizz", "10", "11", "FizzBuzz"]
Example 2:
Input: 5
Output: ["1", "2", "Fizz", "Buzz", "5"]
 
Approach 1:
function fizzBuzz(n) {
    const result = [];

    for (let i = 1; i <= n; i++) {
        if (i % 3 === 0 && i % 4 === 0) {
            result.push("FizzBuzz");
        } else if (i % 3 === 0) {
            result.push("Fizz");
        } else if (i % 4 === 0) {
            result.push("Buzz");
        } else {
            result.push(i.toString());
        }
    }

    return result;
}

// Do not modify the below lines
module.exports = { fizzBuzz };
 
Approach 2: Rewrite the code using switch statement.

// Solution

function fizzBuzz(n) {
    const result = [];

    for (let i = 1; i <= n; i++) {
        switch (true) {
            case i % 3 === 0 && i % 4 === 0:
                result.push("FizzBuzz");
                break;
            case i % 3 === 0:
                result.push("Fizz");
                break;
            case i % 4 === 0:
                result.push("Buzz");
                break;
            default:
                result.push(i.toString());
        }
    }

    return result;
}

// Test examples
console.log(fizzBuzz(12));
// Output: ["1", "2", "Fizz", "Buzz", "5", "Fizz", "7", "Buzz", "Fizz", "10", "11", "FizzBuzz"]

console.log(fizzBuzz(5));
// Output: ["1", "2", "Fizz", "Buzz", "5"]
