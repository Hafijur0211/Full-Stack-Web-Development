JavaScript Loops & Control Statements
Session Flow
Learning Objective 
Introduction
Theme
Primary Goals
JavaScript Loops & Control Statements 
For loop
Infinite for loop
For...in loop
For...of loop
for…in vs for…of
While loop
Flowchart of while Loop
Activity: Guess the words
do...while loop
Flowchart of do...while Loop
for vs while loop
break statement
Activity: Fill in the blanks
continue statement
continue with for loop
Summary 
What did we learn?
Shortcomings & Challenges
Best practices to follow
Enhance your knowledge
Try it Yourself
Learning Objective
Introduction
JavaScript loops are utilized to run a block of code iteratively for a specific count or until a specific criterion is met. Control statements are utilized to direct the course of code execution based on specific criteria.  
Focus: For loop, While and do...while Loop, Break Statement
Prerequisites: VS Code IDE with Node.js installed, JavaScript Basics
Theme
In a weather app such as AccuWeather, real-time weather data is fetched from a weather API and displayed to users in various forms, such as a five-day forecast, an hourly forecast, or a map view. To provide an accurate and up-to-date view of the weather, it's important to use loops and control statements to generate the data visualizations dynamically.
For example, a for loop could be used to iterate over an array of hourly weather data and generate a chart that displays the temperature and precipitation for each hour. An if statement could be used to highlight the hours with the highest precipitation. Another for loop could be used to generate a map view that displays the temperature and precipitation for each location.
This is just one example of how loops and control statements can be used in a real-world scenario. Still, they play an important role in many aspects of software development, including data processing, visualization, and user interaction. The ability to use loops and control statements effectively is an important skill for JavaScript developers to have.
Primary Goals
Learn various for loop types in JavaScript such as for...in loop, for... of Loop.
Learn while and do...while Loop in JavaScript.
Understand the use case of break statements in JavaScript.
 
JavaScript Loops & Control Statements
She spent several hours building out her loops, using for and while statements to iterate through arrays and objects and perform calculations based on the data. But as she worked, she realized that she needed a way to control the flow of the loop so that it would only run when certain conditions were met.
Sophie was a seasoned software developer who had been working with JavaScript for many years. She was tasked with building a new web application that required a lot of data to be displayed on the screen. Sophie knew that she needed to organize this data in a way that would be easy to work with, so she turned to JavaScript loops.
That's when she discovered control statements, such as break and continue, which allowed her to control the flow of the loop and break out of it when necessary.
For loop
A for-loop is a control flow statement that allows you to execute a block of code repeatedly. It's typically used when you need to perform a specific task a certain number of times or when you need to iterate over an array or object. 
The basic syntax for a for-loop in JavaScript is as follows:
for (initialization; condition; increment/decrement) {
  // code to be executed
}
Let's break down each part of the syntax:
Initialization: This is where you declare and assign an initial value to a counter variable. This is usually a variable that will be used to track the current iteration of the loop. For example, you might initialize a variable called i to a value of 0.
Condition: This Boolean expression serves as a decision-making factor to either continue or terminate the loop. The loop will keep executing if the condition evaluates to true, but it will terminate if it evaluates to false. This expression is evaluated at the beginning of each iteration of the loop. As an instance, you could employ the condition i < 10 to signify that the loop must persist until i is no longer less than 10.
Increment/decrement: This is where you update the counter variable at the end of each iteration of the loop. This is usually done using an increment or decrement operator. For example, you might use the expression i++ to increment i by 1 at the end of each iteration.
Code to be executed: This is the block of code that will be executed each time the loop iterates. This can be any valid JavaScript code, including other control flow statements, function calls, or variable assignments.
Here's an example of a for-loop that iterates over an array of numbers and logs each one to the console:
const numbers = [1, 2, 3, 4, 5];

for (let i = 0; i < numbers.length; i++) {
  console.log(numbers[i]);
}
Visualize this code here
Explanation
In this example, the loop initializes a variable called i to a value of 0, sets the condition to i < numbers.length (which is true as long as i is less than the number of elements in the numbers array), and increments i by 1 at the end of each iteration. The block of code that is executed simply logs the current element of the array to the console. The loop continues to iterate until i is equal to the length of the array, at which point the condition is false and the loop terminates.
Example 1: Display a Text Five Times
// program to display text 5 times
for (let i = 0; i < 5; i++) {
  console.log("Hello, world!");
}

// Output
Hello, world!
Hello, world!
Hello, world!
Hello, world!
Hello, world!
Explanation
In this example, we're initializing a variable i to 0 and setting the condition to i < 5. The loop will continue as long as i is less than 5. The console.log("Hello, world!"); statement at the end of each iteration logs the text "Hello, world!" to the console. 
The loop will execute as follows:
Iteration
i Value
Condition
Action
1
0
0 < 5
Log "Hello, world!"
2
1
1 < 5
Log "Hello, world!"
3
2
2 < 5
Log "Hello, world!"
4
3
3 < 5
Log "Hello, world!"
5
4
4 < 5
Log "Hello, world!"
After the fifth iteration, the loop terminates because iis no longer less than 5. The result will be five log statements that each say "Hello, world!" in the console.
Example 2: To Display Numbers from 1 to 5
// write a program to display numbers from 1 to 5
for (let i = 1; i <= 5; i++) {
  console.log(i);
}

// Output
1
2
3
4
5
Explanation
In this example, we're initializing a variable i to 1 and setting the condition to i <= 5. The loop will continue as long as i  is less than or equal to 5. The console.log(i) statement at the end of each iteration logs the value of i to the console. 
The loop will execute as follows:
Iteration
i Value
Condition
Action
1
1
1 <= 5
Log 1
2
2
2 <= 5
Log 2
3
3
3 <= 5
Log 3
4
4
4 <= 5
Log 4
5
5
5 <= 5
Log 5
After the fifth iteration, the loop terminates because i is no longer less than or equal to 5. The result will be five log statements that each display the numbers 1 through 5 in the console.
Infinite for loop
An infinite loop in JavaScript is a loop that runs indefinitely and it never breaks unless the browser is closed or the program is manually stopped.
Here's an example of an infinite loop using a for loop:
// infinite for loop
for (;;) {
  console.log("This loop will run indefinitely!");
}
In this example, the for-loop is initialized with an empty initialization, condition, and final expression, which means that there are no conditions to stop the loop. Therefore, the loop will run indefinitely and keep logging the message "This loop will run indefinitely!" to the console.
Infinite loops can cause your program to become unresponsive and can potentially crash the browser or the environment in which they're running. They should be avoided in most cases. If you're testing an infinite loop in your browser, be prepared to kill the page or even the browser itself.
For...in loop
The for...in loop in JavaScript is a control flow statement that is used to iterate over the enumerable properties of an object, such as its own properties or those inherited through its prototype chain. It provides a convenient way to loop through the properties of an object without needing to know the property names in advance. 
Here's the syntax for the for...in loop:
for (let variable in object) {
  // code to be executed for each value in iterable
}
In this syntax, variable is a variable that is assigned to each property name of the object as the loop iterates, and object is the object that is being looped over. For each property of the object, the code block inside the loop is executed once, with the variable denoting the current property name during each iteration.
Here’s the basic introduction for Objects in JavaScript. You’ll be learning more about Objects in JavaScript in further lessons. 
In JavaScript, an object is a collection of key-value pairs. Each key-value pair in an object is known as a property.
The key (also known as "name" or "identifier") is always a string. The value can be any data type, including numbers, strings, Booleans, arrays, functions, and even other objects.
Here's an example of a for...in loop:
let person = {
  name: 'Alice',
  age: 25,
  city: 'New York'
};

for (let key in person) {
  console.log(`${key}: ${person[key]}`);
}

// Output
name: Alice
age: 25
city: New York
In this example, the for...in loop is used to iterate over the properties of the person object. For each iteration, the variable key is assigned the name of a property, and person[key] is used to access the value of the property.
For...of loop
The for...of loop is a modern loop in JavaScript that is used to iterate over iterable objects, such as Arrays, Strings, Maps, Sets, and so on. It's a more concise and readable syntax compared to traditional for loops and for...in loops.
Here's the syntax for the for...of loop:
for (let variable of iterable) {
  // code to be executed for each value in iterable
}
The variable variable will be assigned the value of the next element in the iterable object. The loop will continue to execute until the iterator has no more values to return.
Here's an example of a for...of loop:
const array = [1, 2, 3, 4, 5];

for (let number of array) {
  console.log(number);
}

// Output
1
2
3
4
5
For...in vs For...of
The main differences between for...ofand for...inloops in JavaScript are outlined below:
Feature Name
for...in Loop
for...of Loop
Object Iteration
Iterates over enumerable properties of an object
Iterates over iterable objects (arrays, strings, maps, sets, etc.)
Returned Values
Returns keys/indexes of the object
Returns values of the iterable object
Iteration Order
Order of iteration is not guaranteed
Order of iteration is guaranteed (based on the iterable object)
Supported Types
Can be used with both objects and arrays
Can only be used with iterable objects
Inherited Properties
Includes inherited properties from the prototype chain
Only iterates over the values directly contained in the iterable object
While loop
The while loop in JavaScript is a statement for controlling the flow of code that enables the repeated execution of a code block while a certain condition remains true.
The syntax for a while loop in JavaScript is as follows:
while (condition) {
  // code to be executed while the condition is true
}
The conditionis an expression that is evaluated before each iteration of the loop. 
If the condition is true, the code enclosed within the loop will be executed. 
When the condition is false, the loop will terminate, and the program will proceed to execute from the location immediately following the loop.
Flowchart of while Loop
notion image
Example 1: To display Numbers from 1 to 5
let i = 1;
while (i <= 5) {
  console.log(i);
  i++;
}

// Output
1
2
3
4
5
Explanation
In this example, the condition is i <= z. The loop will continue to execute as long as the value of i remains less than or equal to 5. Inside the loop, the current value of i is printed to the console, and then i is incremented by 1 using the i++ shorthand for i = i + 1.
Here is how this program works:
Iteration
Variable
Condition
Action
1
i
i <= 5 (true)
console.log(i) -> prints 1, i++ (i becomes 2)
2
i
i <= 5 (true)
console.log(i) -> prints 2, i++ (i becomes 3)
3
i
i <= 5 (true)
console.log(i) -> prints 3, i++ (i becomes 4)
4
i
i <= 5 (true)
console.log(i) -> prints 4, i++ (i becomes 5)
5
i
i <= 5 (true)
console.log(i) -> prints 5, i++ (i becomes 6)
6
i
i <= 5 (false)
loop exits
Example 2: Sum of Positive Numbers Only
// array of numbers
const numbers = [5, -2, 10, 0, -3, 8, -1];

// variable to store the sum
let sum = 0;

// index variable for the while loop
let i = 0;

// Using a while loop, iterate through the array and add any positive numbers to the sum
while (i < numbers.length) {
  if (numbers[i] > 0) {
    sum += numbers[i];
  }
  i++;
}

// print the sum of positive numbers
console.log(`The sum of positive numbers is ${sum}`);

// Output
23
Visualize this code here
 
Activity: Guess the words
DOWN
The Boolean expression evaluated in a loop to determine whether to continue or terminate.
 
A statement used for repeated execution of a code block as long as a certain condition is true.
 
ACROSS
A control flow statement that allows code to be executed repeatedly based on an initialization, condition, and increment/decrement.
 
A type of loop that runs indefinitely without stopping.
 
The process of repeatedly executing a block of code.
notion image
 
do...while loop
The do...while loop in JavaScript shares similarities with the while loop, except that it runs the loop body at least once, regardless of whether the condition is false or not. The loop condition is checked after each iteration, and the loop continues to execute until the condition becomes false.
Here's the syntax for the do...while loop in JavaScript:
do {
  // loop body
} while (condition);
The do...while loop consists of the following parts:
The do keyword: This keyword starts the loop and indicates the beginning of the loop body.
The loop body: This is the code that gets executed repeatedly as long as the condition is true. This part of the loop must be enclosed in curly braces { }.
The while keyword: This keyword is followed by a condition enclosed in parentheses ( ). The condition is checked after each iteration of the loop, and the loop continues to execute as long as the condition is true.
Flowchart of do...while Loop
notion image
Example: To display Numbers from 1 to 5
let i = 1;

do {
  console.log(i);
  i++;
} while (i <= 5);

// Output
1
2
3
4
5
Explanation
In this program, we initialize the variable ito 1 outside the loop. Within the loop, we initially output the value of i to the console, and then use the ++ operator to increase it by 1.
The loop will continue executing as long as the condition i <= 5is true. 
Due to the utilization of a do...while loop, the loop body gets executed at least once prior to the condition being checked. 
Once the value of i reaches 6, the condition becomes false and the loop exits. Therefore, this program will log the numbers from 1 to 5 to the console.
Here is how this program works:
Iteration
Variable
Condition
Action
1
i = 1
i <= 5
Log i to console (1)
2
i = 2
i <= 5
Log i to console (2)
3
i = 3
i <= 5
Log i to console (3)
4
i = 4
i <= 5
Log i to console (4)
5
i = 5
i <= 5
Log i to console (5)
6
i = 6
i <= 5
Exit loop
for vs while Loop
Feature
for loop
while loop
Loop control
Uses initialization, condition, and increment/decrement statement
Uses a single condition to control the loop
Initialization
Optional
Usually done before the loop
Condition
Optional
Must be specified before the loop
Increment/Decrement
Optional
Usually done at the end of the loop
Iteration
Performs iteration automatically based on loop control
Iteration must be manually coded
Syntax
for (initialization; condition; increment/decrement) { ... }
while (condition) { ... }
Typical Use
For loops with a known number of iterations
While loops with a variable number of iterations or unknown conditions
Example
for (let i = 0; i < 10; i++) { console.log(i); }
let i = 0; while (i < 10) { console.log(i); i++; }
break Statement
The break statement in JavaScript is employed to prematurely terminate a loop prior to the loop condition being fulfilled. It can be used with for, while, and do-while loops.
Once the break statement is encountered within a loop, the loop terminates immediately, and control is transferred to the statement succeeding the loop. This allows you to exit a loop prematurely based on a certain condition without having to wait for the loop to run its course.
Working of JavaScript break Statement:
notion image
Example 1: break with for Loop
for (let i = 1; i <= 10; i++) {
  if (i === 5) {
    break;
  }
  console.log(i);
}

// Output
1
2
3
4
Visualize this code here
In this example, the loop will print out the numbers 1 through 4, but when i becomes 5, the break statement is executed, and the loop terminates early.
Example 2: break with while Loop
let i = 1;
while (i <= 10) {
  if (i === 5) {
    break;
  }
  console.log(i);
  i++;
}

// Output
1
2
3
4
In this case, the loop will also print out the numbers 1 through 4 before terminating early when i becomes 5.
 
Activity: Fill in the blanks
The variable in the for...of loop is assigned the value of the __________ (previous / next / random) element in the iterable object.
The for...in loop iterates over __________ (enumerable / inherited / private) properties of an object.
In a for...of loop, the loop will continue to execute until the __________ (iterator / variable / condition) has no more values to return.
The while loop in JavaScript executes the loop body __________ (at least once / multiple times / never) if the condition is true initially.
The condition in a do...while loop is checked __________ (before each iteration / after each iteration / only once at the beginning).
Answers
next
enumerable
iterator
multiple times
after each iteration
 
continue Statement
The continue statement in JavaScript is employed within loops to bypass the current iteration and proceed to the subsequent iteration of the loop. 
Example: 
// Example of using continue statement

for (var i = 1; i <= 5; i++) {
  // Skip iteration if i is odd
  if (i % 2 !== 0) {
    continue; // continue statement used here
  }

  console.log("Iteration: " + i);
}

console.log("Exited the loop.");

// Output
Iteration: 2
Iteration: 4
Exited the loop.
Visualize this code here
In this example, there is a for loop that iterates five times, from 1 to 5. Inside the loop, there is an if statement that checks if i is odd. If i is odd, the continue statement is executed, which skips the rest of the code in the loop for that iteration and moves on to the next iteration.
Working of JavaScript continue Statement
notion image
continue with for Loop
In JavaScript, the continue statement is used within a loop to skip the current iteration and move on to the next iteration. It is commonly used when you want to skip certain values or operations within a loop and move on to the next one. The continue statement works with all types of loops, including the for loop.
Here is an example of using continue with a for loop in JavaScript:
for (let i = 1; i <= 5; i++) {
  if (i === 3) {
    // skip iteration if i equals 3
    continue;
  }
  console.log(i);
}

// Output
1
2
4
5
In the above example, the loop will iterate through the values of i from 1 to 5. In the event that i is equal to 3, the continue statement will be executed, causing the loop to disregard the present iteration and proceed to the subsequent one. This means that the number 3 will not be printed to the console.
It's important to note that the continue statement only skips the current iteration and moves on to the next one. It does not stop the loop entirely. If you want to stop the loop based on a condition, you should use the break statement instead.
In a survey of over 116,000 developers by Stack Overflow in 2021, 81.3% of respondents reported using loops in their work.
 
Summary
What did we learn?
JavaScript Loops and Control Statements are fundamental building blocks of JavaScript programming that allow developers to control the flow of their code. 
Loops are used to repeat blocks of code, while control statements are used to make decisions and direct the flow of code execution based on conditions. 
The main types of loops in JavaScript are for loops and while loops, and the main types of control statements are if statements, switch statements, and ternary operators. 
The break statement in JavaScript is used to exit a loop prematurely before the loop's condition is met.
Shortcomings & Challenges
if-else loops are that they can become slow and inefficient when used to handle many conditions.
if-else loops can be error-prone, as it is easy to forget to include a condition or to include a condition that is never met.
One of the biggest risks with while and do-while loops is the possibility of creating an infinite loop where the loop never ends.
Using break statements can cause performance overhead, especially in large loops where the code must evaluate the break condition repeatedly.
Best practices to follow
Optimize the code inside the loop to make it as efficient as possible. This can help to reduce the time it takes to execute the loop and improve the overall performance of the application.
Consider breaking up complex loops into smaller, more manageable pieces, making the code easier to read and understand.
Choose the right type of loop for the task at hand. Use a while loop if you need to loop until a certain condition is met. If you need to execute the code inside the loop at least once, use a do...while loop.
 
Enhance your knowledge
Supercharge your knowledge by exploring the resources provided! 📚
JavaScript Loop Control: https://data-flair.training/blogs/javascript-loop-control/
Loop Optimization: https://dev.to/srsajjad/optimizing-loop-in-javascript-3la
 
Try it Yourself
Let's solve these coding problems in the AlmaBetter IDE. Don't forget to join the AlmaBetter Community Platform to share your brilliant approaches and cheer each other on! 🚀 Happy coding! 💻😄
Task 1: Take a shot at cracking these coding problems right within the AlmaBetter IDE.
Problems
Problem 1: The Odd or Even Sum
In the mystical land of numbers, there lived a talented JavaScript wizard named Alaric. He possessed a unique power to distinguish between odd and even numbers effortlessly. One day, the people of the land came to him with a puzzling request. They wanted a function that could compute the sum of odd and even numbers separately from a given array of integers.
Determined to help, Alaric began crafting a function called oddOrEvenSum. The function would take an array of integers as input and return an object containing the sum of all odd numbers and the sum of all even numbers found in the array.
With a heart full of curiosity and magic at his fingertips, Alaric delved into the task, creating a solution that showcased his mastery over decision statements. Little did he know that this function would prove invaluable to the people of the mystical land, helping them unravel the secrets hidden within their numbers.
Can you assist Alaric in completing his enchanting oddOrEvenSum function to bring balance to the numbers of the land?
Can you rise to the challenge of the String Splitter and impress your teacher with your coding skills? The challenge awaits, and it's up to you to take it on.
Example 1:
Input: [1, 2, 3, 4, 5]
Output: { oddSum: 9, evenSum: 6 }
Example 2:
Input: [10, 20, 30, 40, 50]
Output: { oddSum: 0, evenSum: 150 }
Example 3:
Input: [7, 13, 42, 31, 55]
Output: { oddSum: 106, evenSum: 42 }
Problem 2: The Grade Distributor
In a kingdom where knowledge was highly cherished, the wise scholars developed a system to grade students based on their academic performance. They assigned letter grades "A", "B", "C", "D", and "F" to represent different levels of achievement.
The kingdom needed a function that would analyze a set of numerical scores and distribute the corresponding letter grades to each student. They sought a skilled JavaScript sorcerer to create the distributeGrades function.
The distributeGrades function would take an array of numerical scores as input and return an object containing the count of grades distributed as "A", "B", "C", "D", and "F", respectively, based on the following scale:
Scores from 90 to 100 would receive an "A". Scores from 80 to 89 would receive a "B". Scores from 70 to 79 would receive a "C". Scores from 60 to 69 would receive a "D". Scores below 60 would receive an "F". Eager to leave a mark on the kingdom's education system, the JavaScript sorcerer accepted the challenge. Utilizing decision statements, the sorcerer worked tirelessly to craft a solution that would efficiently distribute the grades and empower the kingdom's educators with valuable insights.
Could you lend your coding expertise to assist the JavaScript sorcerer in completing the distributeGrades function and bestow the gift of knowledge upon the kingdom's students?
Example 1
Input:
[85, 92, 78, 65, 95]
Output:
{ A: 2, B: 1, C: 1, D: 1, F: 0 }
Example 2
Input:
[76, 81, 60, 55, 88}

Output:
{ A: 0, B: 2, C: 1, D: 1, F: 1 }
Example 3
Input:
[92, 95, 87, 60, 72]

Output:
{ A: 2, B: 1, C: 1, D: 1, F: 0 }
Problem 3: Simple Calculator
Alice is a math teacher who wants to create a simple calculator using JavaScript. The calculator should be able to perform basic arithmetic operations like addition, subtraction, multiplication, and division.
Help Alice by creating a JavaScript function called simpleCalculator that takes two numbers and an operator (+, -, *, /) as input and returns the arithmetic operation result.
// Test cases
console.log(simpleCalculator(5, 2, '+')); // 7
console.log(simpleCalculator(5, 2, '-')); // 3
console.log(simpleCalculator(5, 2, '*')); // 10
console.log(simpleCalculator(5, 2, '/')); // 2.5
console.log(simpleCalculator(5, 0, '/')); // "Cannot divide by zero."
console.log(simpleCalculator('5', 2, '+')); // "Invalid input. Please enter numeric values."
console.log(simpleCalculator(5, 2, '&')); // "Unsupported operator. Please enter a valid operator (+, -, *, /)."
Solutions
Problem 1: The Odd or Even Sum
function oddOrEvenSum(arr) {
  let oddSum = 0;
  let evenSum = 0;

  for (let num of arr) {
    if (num % 2 === 0) {
      evenSum += num;
    } else {
      oddSum += num;
    }
  }

  return { oddSum, evenSum };
}
Problem 2: The Grade Distributor
function distributeGrades(scores) {
  const gradeCount = { A: 0, B: 0, C: 0, D: 0, F: 0 };

  for (let score of scores) {
    if (score >= 90) {
      gradeCount.A++;
    } else if (score >= 80) {
      gradeCount.B++;
    } else if (score >= 70) {
      gradeCount.C++;
    } else if (score >= 60) {
      gradeCount.D++;
    } else {
      gradeCount.F++;
    }
  }

  return gradeCount;
}
Problem 3: Simple Calculator
function simpleCalculator(num1, num2, operator) {
 if (isNaN(num1) || isNaN(num2)) {
    return "Invalid input. Please enter numeric values.";
  }
  
  switch(operator) {
    case '+':
      return num1 + num2;
    case '-':
      return num1 - num2;
    case '*':
      return num1 * num2;
    case '/':
      if (num2 === 0) {
        return "Cannot divide by zero.";
      } else {
        return num1 / num2;
      }
break;
    default:
      return "Unsupported operator. Please enter a valid operator (+, -, *, /).";
  }
}
Task 2: Which question did you find challenging and Why? Share your thoughts in your Cohort group at AlmaBetter Community Platform.
